// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as identityModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.IdentityClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = identityModule.v1alpha1.IdentityClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = identityModule.v1alpha1.IdentityClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = identityModule.v1alpha1.IdentityClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new identityModule.v1alpha1.IdentityClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.identityStub, undefined);
            await client.initialize();
            assert(client.identityStub);
        });

        it('has close method for the initialized client', done => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.identityStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.identityStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getUserProfile', () => {
        it('invokes getUserProfile without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserProfileRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserProfileRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserProfile()
            );
            client.innerApiCalls.getUserProfile = stubSimpleCall(expectedResponse);
            const [response] = await client.getUserProfile(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserProfile without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserProfileRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserProfileRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserProfile()
            );
            client.innerApiCalls.getUserProfile = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUserProfile(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserProfile|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserProfile with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserProfileRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserProfileRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUserProfile = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUserProfile(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserProfile as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserProfile with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserProfileRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserProfileRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getUserProfile(request), expectedError);
        });
    });

    describe('getUser', () => {
        it('invokes getUser without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.getUser = stubSimpleCall(expectedResponse);
            const [response] = await client.getUser(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUser without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.getUser = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUser(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUser|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUser with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUser = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUser(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUser with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getUser(request), expectedError);
        });
    });

    describe('createUser', () => {
        it('invokes createUser without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateUserRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.createUser = stubSimpleCall(expectedResponse);
            const [response] = await client.createUser(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes createUser without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateUserRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.createUser = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createUser(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUser|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes createUser with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateUserRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.createUser = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createUser(request), expectedError);
        });

        it('invokes createUser with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateUserRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createUser(request), expectedError);
        });
    });

    describe('updateUser', () => {
        it('invokes updateUser without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserRequest()
            );
            request.user ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserRequest', ['user', 'name']);
            request.user.name = defaultValue1;
            const expectedHeaderRequestParams = `user.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.updateUser = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUser(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUser without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserRequest()
            );
            request.user ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserRequest', ['user', 'name']);
            request.user.name = defaultValue1;
            const expectedHeaderRequestParams = `user.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.User()
            );
            client.innerApiCalls.updateUser = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUser(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUser|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUser with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserRequest()
            );
            request.user ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserRequest', ['user', 'name']);
            request.user.name = defaultValue1;
            const expectedHeaderRequestParams = `user.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUser = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUser(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUser with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserRequest()
            );
            request.user ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserRequest', ['user', 'name']);
            request.user.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateUser(request), expectedError);
        });
    });

    describe('deleteUser', () => {
        it('invokes deleteUser without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUser = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteUser(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUser without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteUser = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteUser(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUser with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteUser = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteUser(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteUser as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteUser with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteUserRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteUserRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteUser(request), expectedError);
        });
    });

    describe('getUserSettings', () => {
        it('invokes getUserSettings without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserSettings()
            );
            client.innerApiCalls.getUserSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getUserSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserSettings without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserSettings()
            );
            client.innerApiCalls.getUserSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUserSettings(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserSettings with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUserSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUserSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserSettings with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserSettingsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserSettingsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getUserSettings(request), expectedError);
        });
    });

    describe('updateUserSettings', () => {
        it('invokes updateUserSettings without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserSettings()
            );
            client.innerApiCalls.updateUserSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUserSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserSettings without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserSettings()
            );
            client.innerApiCalls.updateUserSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUserSettings(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserSettings with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedHeaderRequestParams = `settings.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUserSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUserSettings(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserSettings as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserSettings with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserSettingsRequest()
            );
            request.settings ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserSettingsRequest', ['settings', 'name']);
            request.settings.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateUserSettings(request), expectedError);
        });
    });

    describe('getUserNotifications', () => {
        it('invokes getUserNotifications without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserNotificationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserNotificationsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserNotifications()
            );
            client.innerApiCalls.getUserNotifications = stubSimpleCall(expectedResponse);
            const [response] = await client.getUserNotifications(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserNotifications without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserNotificationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserNotificationsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserNotifications()
            );
            client.innerApiCalls.getUserNotifications = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUserNotifications(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserNotifications|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserNotifications with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserNotificationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserNotificationsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUserNotifications = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUserNotifications(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserNotifications with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserNotificationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserNotificationsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getUserNotifications(request), expectedError);
        });
    });

    describe('updateUserNotifications', () => {
        it('invokes updateUserNotifications without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest()
            );
            request.notifications ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest', ['notifications', 'name']);
            request.notifications.name = defaultValue1;
            const expectedHeaderRequestParams = `notifications.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserNotifications()
            );
            client.innerApiCalls.updateUserNotifications = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUserNotifications(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserNotifications without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest()
            );
            request.notifications ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest', ['notifications', 'name']);
            request.notifications.name = defaultValue1;
            const expectedHeaderRequestParams = `notifications.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserNotifications()
            );
            client.innerApiCalls.updateUserNotifications = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUserNotifications(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserNotifications|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserNotifications with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest()
            );
            request.notifications ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest', ['notifications', 'name']);
            request.notifications.name = defaultValue1;
            const expectedHeaderRequestParams = `notifications.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUserNotifications = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUserNotifications(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateUserNotifications as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateUserNotifications with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest()
            );
            request.notifications ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateUserNotificationsRequest', ['notifications', 'name']);
            request.notifications.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateUserNotifications(request), expectedError);
        });
    });

    describe('getUserDefaults', () => {
        it('invokes getUserDefaults without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserDefaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserDefaultsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserDefaults()
            );
            client.innerApiCalls.getUserDefaults = stubSimpleCall(expectedResponse);
            const [response] = await client.getUserDefaults(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserDefaults without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserDefaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserDefaultsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UserDefaults()
            );
            client.innerApiCalls.getUserDefaults = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUserDefaults(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUserDefaults|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserDefaults with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserDefaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserDefaultsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getUserDefaults = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUserDefaults(request), expectedError);
            const actualRequest = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getUserDefaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getUserDefaults with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetUserDefaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetUserDefaultsRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getUserDefaults(request), expectedError);
        });
    });

    describe('getGroup', () => {
        it('invokes getGroup without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.getGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.getGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.getGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getGroup(request), expectedError);
        });
    });

    describe('createGroup', () => {
        it('invokes createGroup without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateGroupRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.createGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.createGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes createGroup without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateGroupRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.createGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes createGroup with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateGroupRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.createGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createGroup(request), expectedError);
        });

        it('invokes createGroup with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.CreateGroupRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createGroup(request), expectedError);
        });
    });

    describe('updateGroup', () => {
        it('invokes updateGroup without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.updateGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.updateGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.Group()
            );
            client.innerApiCalls.updateGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateGroup(request), expectedError);
        });
    });

    describe('deleteGroup', () => {
        it('invokes deleteGroup without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteGroup(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup with closed client', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.identity.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteGroup(request), expectedError);
        });
    });

    describe('listUsers', () => {
        it('invokes listUsers without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
            ];
            client.innerApiCalls.listUsers = stubSimpleCall(expectedResponse);
            const [response] = await client.listUsers(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes listUsers without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
            ];
            client.innerApiCalls.listUsers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUsers(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IUser[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes listUsers with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.listUsers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUsers(request), expectedError);
        });

        it('invokes listUsersStream without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
            ];
            client.descriptors.page.listUsers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUsersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.identity.v1alpha1.User[] = [];
                stream.on('data', (response: protos.animeshon.identity.v1alpha1.User) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUsers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUsers, request));
        });

        it('invokes listUsersStream with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.listUsers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUsersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.identity.v1alpha1.User[] = [];
                stream.on('data', (response: protos.animeshon.identity.v1alpha1.User) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUsers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUsers, request));
        });

        it('uses async iteration with listUsers without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.User()),
            ];
            client.descriptors.page.listUsers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.identity.v1alpha1.IUser[] = [];
            const iterable = client.listUsersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUsers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listUsers with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListUsersRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.listUsers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUsersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.identity.v1alpha1.IUser[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUsers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listGroups', () => {
        it('invokes listGroups without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
            ];
            client.innerApiCalls.listGroups = stubSimpleCall(expectedResponse);
            const [response] = await client.listGroups(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes listGroups without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
            ];
            client.innerApiCalls.listGroups = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listGroups(
                    request,
                    (err?: Error|null, result?: protos.animeshon.identity.v1alpha1.IGroup[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes listGroups with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.listGroups = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listGroups(request), expectedError);
        });

        it('invokes listGroupsStream without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
            ];
            client.descriptors.page.listGroups.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listGroupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.identity.v1alpha1.Group[] = [];
                stream.on('data', (response: protos.animeshon.identity.v1alpha1.Group) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listGroups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGroups, request));
        });

        it('invokes listGroupsStream with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.listGroups.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listGroupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.identity.v1alpha1.Group[] = [];
                stream.on('data', (response: protos.animeshon.identity.v1alpha1.Group) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listGroups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGroups, request));
        });

        it('uses async iteration with listGroups without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
              generateSampleMessage(new protos.animeshon.identity.v1alpha1.Group()),
            ];
            client.descriptors.page.listGroups.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.identity.v1alpha1.IGroup[] = [];
            const iterable = client.listGroupsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listGroups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listGroups with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.identity.v1alpha1.ListGroupsRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.listGroups.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listGroupsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.identity.v1alpha1.IGroup[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listGroups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new identityModule.v1alpha1.IdentityClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
