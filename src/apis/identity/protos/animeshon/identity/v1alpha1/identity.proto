syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package animeshon.identity.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/identity/v1alpha1;identity";
option java_package = "com.animeshon.identity.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Identity::v1Alpha1";

service Identity {
  option (google.api.default_host) = "identity.animeapis.com";

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*}"
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/users"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1alpha1/users"
      body: "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1alpha1/{user.name=users/*}"
      body: "*"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*}"
    };
  }

  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=groups/*}"
    };
  }

  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/groups"
    };
  }

  rpc CreateGroup(CreateGroupRequest) returns (Group) {
    option (google.api.http) = {
      post: "/v1alpha1/groups"
      body: "*"
    };
  }

  rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
    option (google.api.http) = {
      patch: "/v1alpha1/{group.name=groups/*}"
      body: "*"
    };
  }

  rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=groups/*}"
    };
  }
}

message User {
  // The resource name of the user.
  string name = 1;

  // The uuid that identifies the user during the authentication flow.
  string uuid = 2 [(google.api.field_behavior) = IMMUTABLE];

  // The public username of the user.
  string username = 3;

  // The public discriminator of the user.
  string discriminator = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The primary email address of the user.
  string primary_email = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Whether the primary email address has been verified.
  bool primary_email_verified = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The given name of the user.
  string given_name = 7;

  // The family name of the user.
  string family_name = 8;

  // The name of the user.
  string display_name = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message Group {
  // The resource name of the group.
  string name = 1;

  // The list of members of the group. Groups might include other groups.
  repeated string members = 2;

  // An etag for concurrency control, ignored during creation.
  bytes etag = 3;
}

message GetUserRequest {
  // The name of the user to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
}

message ListUsersRequest {
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // The value returned from the previous call.
  string page_token = 2;

  // A filter to be applied to results.
  string filter = 3;
}

message ListUsersResponse {
  // The list of users.
  repeated User users = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateUserRequest {
  // The user to create.
  User user = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
}

message UpdateUserRequest {
  // The user to update.
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteUserRequest {
  // The name of the user to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/User"
    }
  ];
}

message GetGroupRequest {
  // The name of the group to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/Group"
    }
  ];
}

message ListGroupsRequest {
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // The value returned from the previous call.
  string page_token = 2;

  // A filter to be applied to results.
  string filter = 3;
}

message ListGroupsResponse {
  // The list of groups.
  repeated Group groups = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateGroupRequest {
  // The group to create.
  Group group = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/Group"
    }
  ];
}

message UpdateGroupRequest {
  // The group to update.
  Group group = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteGroupRequest {
  // The name of the group to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "identity.animeapis.com/Group"
    }
  ];
}
