// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as libraryModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.LibraryClient', () => {
    it('has servicePath', () => {
        const servicePath = libraryModule.v1alpha1.LibraryClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = libraryModule.v1alpha1.LibraryClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = libraryModule.v1alpha1.LibraryClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new libraryModule.v1alpha1.LibraryClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new libraryModule.v1alpha1.LibraryClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.libraryStub, undefined);
        await client.initialize();
        assert(client.libraryStub);
    });

    it('has close method for the initialized client', done => {
        const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.libraryStub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.libraryStub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getPlaylist', () => {
        it('invokes getPlaylist without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.GetPlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.getPlaylist = stubSimpleCall(expectedResponse);
            const [response] = await client.getPlaylist(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getPlaylist without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.GetPlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.getPlaylist = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPlaylist(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylist|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getPlaylist with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.GetPlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getPlaylist = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPlaylist(request), expectedError);
            assert((client.innerApiCalls.getPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getPlaylist with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.GetPlaylistRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getPlaylist(request), expectedError);
        });
    });

    describe('createPlaylist', () => {
        it('invokes createPlaylist without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.createPlaylist = stubSimpleCall(expectedResponse);
            const [response] = await client.createPlaylist(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPlaylist without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.createPlaylist = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPlaylist(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylist|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createPlaylist with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createPlaylist = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPlaylist(request), expectedError);
            assert((client.innerApiCalls.createPlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPlaylist with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createPlaylist(request), expectedError);
        });
    });

    describe('updatePlaylist', () => {
        it('invokes updatePlaylist without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.UpdatePlaylistRequest());
            request.playlist = {};
            request.playlist.name = '';
            const expectedHeaderRequestParams = "playlist.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.updatePlaylist = stubSimpleCall(expectedResponse);
            const [response] = await client.updatePlaylist(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updatePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updatePlaylist without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.UpdatePlaylistRequest());
            request.playlist = {};
            request.playlist.name = '';
            const expectedHeaderRequestParams = "playlist.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist());
            client.innerApiCalls.updatePlaylist = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updatePlaylist(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylist|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updatePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updatePlaylist with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.UpdatePlaylistRequest());
            request.playlist = {};
            request.playlist.name = '';
            const expectedHeaderRequestParams = "playlist.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updatePlaylist = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updatePlaylist(request), expectedError);
            assert((client.innerApiCalls.updatePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updatePlaylist with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.UpdatePlaylistRequest());
            request.playlist = {};
            request.playlist.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updatePlaylist(request), expectedError);
        });
    });

    describe('deletePlaylist', () => {
        it('invokes deletePlaylist without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePlaylist = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePlaylist(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePlaylist without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePlaylist = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePlaylist(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deletePlaylist with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePlaylist = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePlaylist(request), expectedError);
            assert((client.innerApiCalls.deletePlaylist as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePlaylist with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deletePlaylist(request), expectedError);
        });
    });

    describe('createPlaylistItem', () => {
        it('invokes createPlaylistItem without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem());
            client.innerApiCalls.createPlaylistItem = stubSimpleCall(expectedResponse);
            const [response] = await client.createPlaylistItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPlaylistItem without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem());
            client.innerApiCalls.createPlaylistItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPlaylistItem(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylistItem|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createPlaylistItem with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createPlaylistItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPlaylistItem(request), expectedError);
            assert((client.innerApiCalls.createPlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPlaylistItem with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.CreatePlaylistItemRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createPlaylistItem(request), expectedError);
        });
    });

    describe('batchCreatePlaylistItems', () => {
        it('invokes batchCreatePlaylistItems without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsResponse());
            client.innerApiCalls.batchCreatePlaylistItems = stubSimpleCall(expectedResponse);
            const [response] = await client.batchCreatePlaylistItems(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreatePlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchCreatePlaylistItems without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsResponse());
            client.innerApiCalls.batchCreatePlaylistItems = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchCreatePlaylistItems(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IBatchCreatePlaylistItemsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreatePlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchCreatePlaylistItems with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchCreatePlaylistItems = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchCreatePlaylistItems(request), expectedError);
            assert((client.innerApiCalls.batchCreatePlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchCreatePlaylistItems with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.BatchCreatePlaylistItemsRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.batchCreatePlaylistItems(request), expectedError);
        });
    });

    describe('deletePlaylistItem', () => {
        it('invokes deletePlaylistItem without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePlaylistItem = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePlaylistItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePlaylistItem without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePlaylistItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePlaylistItem(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deletePlaylistItem with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePlaylistItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePlaylistItem(request), expectedError);
            assert((client.innerApiCalls.deletePlaylistItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePlaylistItem with closed client', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.DeletePlaylistItemRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deletePlaylistItem(request), expectedError);
        });
    });

    describe('listPlaylists', () => {
        it('invokes listPlaylists without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
            ];
            client.innerApiCalls.listPlaylists = stubSimpleCall(expectedResponse);
            const [response] = await client.listPlaylists(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPlaylists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPlaylists without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
            ];
            client.innerApiCalls.listPlaylists = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPlaylists(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylist[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPlaylists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listPlaylists with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listPlaylists = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPlaylists(request), expectedError);
            assert((client.innerApiCalls.listPlaylists as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPlaylistsStream without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
            ];
            client.descriptors.page.listPlaylists.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPlaylistsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.library.v1alpha1.Playlist[] = [];
                stream.on('data', (response: protos.animeshon.library.v1alpha1.Playlist) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPlaylists.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPlaylists, request));
            assert.strictEqual(
                (client.descriptors.page.listPlaylists.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listPlaylistsStream with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listPlaylists.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPlaylistsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.library.v1alpha1.Playlist[] = [];
                stream.on('data', (response: protos.animeshon.library.v1alpha1.Playlist) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPlaylists.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPlaylists, request));
            assert.strictEqual(
                (client.descriptors.page.listPlaylists.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPlaylists without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.Playlist()),
            ];
            client.descriptors.page.listPlaylists.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.library.v1alpha1.IPlaylist[] = [];
            const iterable = client.listPlaylistsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPlaylists.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPlaylists.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPlaylists with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listPlaylists.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPlaylistsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.library.v1alpha1.IPlaylist[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPlaylists.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPlaylists.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listPlaylistItems', () => {
        it('invokes listPlaylistItems without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
            ];
            client.innerApiCalls.listPlaylistItems = stubSimpleCall(expectedResponse);
            const [response] = await client.listPlaylistItems(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPlaylistItems without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
            ];
            client.innerApiCalls.listPlaylistItems = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPlaylistItems(
                    request,
                    (err?: Error|null, result?: protos.animeshon.library.v1alpha1.IPlaylistItem[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listPlaylistItems with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listPlaylistItems = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPlaylistItems(request), expectedError);
            assert((client.innerApiCalls.listPlaylistItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPlaylistItemsStream without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
            ];
            client.descriptors.page.listPlaylistItems.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPlaylistItemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.library.v1alpha1.PlaylistItem[] = [];
                stream.on('data', (response: protos.animeshon.library.v1alpha1.PlaylistItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPlaylistItems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPlaylistItems, request));
            assert.strictEqual(
                (client.descriptors.page.listPlaylistItems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listPlaylistItemsStream with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listPlaylistItems.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPlaylistItemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.library.v1alpha1.PlaylistItem[] = [];
                stream.on('data', (response: protos.animeshon.library.v1alpha1.PlaylistItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPlaylistItems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPlaylistItems, request));
            assert.strictEqual(
                (client.descriptors.page.listPlaylistItems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPlaylistItems without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
              generateSampleMessage(new protos.animeshon.library.v1alpha1.PlaylistItem()),
            ];
            client.descriptors.page.listPlaylistItems.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.library.v1alpha1.IPlaylistItem[] = [];
            const iterable = client.listPlaylistItemsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPlaylistItems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPlaylistItems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPlaylistItems with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.library.v1alpha1.ListPlaylistItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listPlaylistItems.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPlaylistItemsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.library.v1alpha1.IPlaylistItem[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPlaylistItems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPlaylistItems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new libraryModule.v1alpha1.LibraryClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
