syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";

package animeshon.hub.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/hub/v1alpha1;hub";
option java_package = "com.animeshon.hub.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Hub::v1Alpha1";

service Git {
  option (google.api.default_host) = "hub.animeapis.com";

  rpc AdvertiseReferences(AdvertiseReferencesRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=namespaces/*/repositories/*}/info/refs"
      additional_bindings {
        get: "/v1alpha1/{name=*/*}/info/refs"
      }
    };
  }

  rpc ReceivePack(ReceivePackRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=namespaces/*/repositories/*}/git-receive-pack"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{name=*/*}/git-receive-pack"
        body: "*"
      }
    };
  }

  rpc UploadPack(UploadPackRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=namespaces/*/repositories/*}/git-upload-pack"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{name=*/*}/git-upload-pack"
        body: "*"
      }
    };
  }
}

service Hub {
  option (google.api.default_host) = "hub.animeapis.com";

  rpc CreateRepository(CreateRepositoryRequest) returns (Repository) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=namespaces/*/repositories/*}"
      body: "*"
    };
  }

  rpc DeleteRepository(DeleteRepositoryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=namespaces/*/repositories/*}"
    };
  }
}

message Repository {
  string name = 1;
}

message AdvertiseReferencesRequest {
  string name = 1;
  string service = 2;
}

message ReceivePackRequest {
  string name = 1;
  google.api.HttpBody body = 2;
}

message UploadPackRequest {
  string name = 1;
  google.api.HttpBody body = 2;
}

message CreateRepositoryRequest {
  string name = 1;
}

message DeleteRepositoryRequest {
  string name = 1;
}