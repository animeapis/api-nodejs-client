// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/publisher_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './publisher_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class PublisherClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  publisherStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of PublisherClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new PublisherClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof PublisherClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listReleases:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'releases')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.release.v1alpha1.Publisher', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.publisherStub) {
      return this.publisherStub;
    }

    // Put together the "service stub" for
    // animeshon.release.v1alpha1.Publisher.
    this.publisherStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.release.v1alpha1.Publisher') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.release.v1alpha1.Publisher,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const publisherStubMethods =
        ['getRelease', 'listReleases', 'createRelease', 'updateRelease', 'deleteRelease', 'undeleteRelease', 'publishRelease', 'unpublishRelease', 'scheduleRelease', 'cancelRelease', 'suspendRelease'];
    for (const methodName of publisherStubMethods) {
      const callPromise = this.publisherStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.publisherStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'release.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'release.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Release]{@link animeshon.release.v1alpha1.Release}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.get_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_GetRelease_async
 */
  getRelease(
      request?: protos.animeshon.release.v1alpha1.IGetReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IGetReleaseRequest|undefined, {}|undefined
      ]>;
  getRelease(
      request: protos.animeshon.release.v1alpha1.IGetReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IGetReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  getRelease(
      request: protos.animeshon.release.v1alpha1.IGetReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IGetReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  getRelease(
      request?: protos.animeshon.release.v1alpha1.IGetReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IGetReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IGetReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IGetReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getRelease(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent this release belongs to.
 * @param {animeshon.release.v1alpha1.Release} request.release
 *   The release to create.
 * @param {google.protobuf.Duration} request.ttl
 *   The time-to-live indicating for how long this release should be published.
 *   If set to zero, the release will not have an expiration time.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Release]{@link animeshon.release.v1alpha1.Release}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.create_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_CreateRelease_async
 */
  createRelease(
      request?: protos.animeshon.release.v1alpha1.ICreateReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.ICreateReleaseRequest|undefined, {}|undefined
      ]>;
  createRelease(
      request: protos.animeshon.release.v1alpha1.ICreateReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.ICreateReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  createRelease(
      request: protos.animeshon.release.v1alpha1.ICreateReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.ICreateReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  createRelease(
      request?: protos.animeshon.release.v1alpha1.ICreateReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.ICreateReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.ICreateReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.ICreateReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createRelease(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.release.v1alpha1.Release} request.release
 *   The release to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Release]{@link animeshon.release.v1alpha1.Release}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.update_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_UpdateRelease_async
 */
  updateRelease(
      request?: protos.animeshon.release.v1alpha1.IUpdateReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|undefined, {}|undefined
      ]>;
  updateRelease(
      request: protos.animeshon.release.v1alpha1.IUpdateReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  updateRelease(
      request: protos.animeshon.release.v1alpha1.IUpdateReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  updateRelease(
      request?: protos.animeshon.release.v1alpha1.IUpdateReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IUpdateReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'release.name': request.release!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateRelease(request, options, callback);
  }
/**
 * The release is soft-deleted and a grace period is granted before complete
 * deletion. During this grace period the release can be recovered.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.delete_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_DeleteRelease_async
 */
  deleteRelease(
      request?: protos.animeshon.release.v1alpha1.IDeleteReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|undefined, {}|undefined
      ]>;
  deleteRelease(
      request: protos.animeshon.release.v1alpha1.IDeleteReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRelease(
      request: protos.animeshon.release.v1alpha1.IDeleteReleaseRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRelease(
      request?: protos.animeshon.release.v1alpha1.IDeleteReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.release.v1alpha1.IDeleteReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteRelease(request, options, callback);
  }
/**
 * This method allows to recover a release while still in the grace period.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to undelete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Release]{@link animeshon.release.v1alpha1.Release}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.undelete_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_UndeleteRelease_async
 */
  undeleteRelease(
      request?: protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|undefined, {}|undefined
      ]>;
  undeleteRelease(
      request: protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  undeleteRelease(
      request: protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  undeleteRelease(
      request?: protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IRelease,
          protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease,
        protos.animeshon.release.v1alpha1.IUndeleteReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.undeleteRelease(request, options, callback);
  }
/**
 * The release is marked as immediately available to the public.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to publish.
 * @param {animeshon.release.v1alpha1.ReleaseStrategy} request.strategy
 *   The release strategy to use.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [PublishReleaseResponse]{@link animeshon.release.v1alpha1.PublishReleaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.publish_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_PublishRelease_async
 */
  publishRelease(
      request?: protos.animeshon.release.v1alpha1.IPublishReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
        protos.animeshon.release.v1alpha1.IPublishReleaseRequest|undefined, {}|undefined
      ]>;
  publishRelease(
      request: protos.animeshon.release.v1alpha1.IPublishReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IPublishReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  publishRelease(
      request: protos.animeshon.release.v1alpha1.IPublishReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IPublishReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  publishRelease(
      request?: protos.animeshon.release.v1alpha1.IPublishReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IPublishReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IPublishReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IPublishReleaseResponse,
        protos.animeshon.release.v1alpha1.IPublishReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.publishRelease(request, options, callback);
  }
/**
 * The release is unpublished and marked as a draft, associated
 * non-authoritative will automatically be marked as suspended and hidden from
 * the general public.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to publish.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UnpublishReleaseResponse]{@link animeshon.release.v1alpha1.UnpublishReleaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.unpublish_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_UnpublishRelease_async
 */
  unpublishRelease(
      request?: protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
        protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|undefined, {}|undefined
      ]>;
  unpublishRelease(
      request: protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  unpublishRelease(
      request: protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  unpublishRelease(
      request?: protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
          protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse,
        protos.animeshon.release.v1alpha1.IUnpublishReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.unpublishRelease(request, options, callback);
  }
/**
 * The release is scheduled to be released at a specific future date and time.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to schedule.
 * @param {animeshon.release.v1alpha1.ReleaseStrategy} request.strategy
 *   The release strategy to use.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ScheduleReleaseResponse]{@link animeshon.release.v1alpha1.ScheduleReleaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.schedule_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_ScheduleRelease_async
 */
  scheduleRelease(
      request?: protos.animeshon.release.v1alpha1.IScheduleReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
        protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|undefined, {}|undefined
      ]>;
  scheduleRelease(
      request: protos.animeshon.release.v1alpha1.IScheduleReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
          protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  scheduleRelease(
      request: protos.animeshon.release.v1alpha1.IScheduleReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
          protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  scheduleRelease(
      request?: protos.animeshon.release.v1alpha1.IScheduleReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
          protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
          protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.IScheduleReleaseResponse,
        protos.animeshon.release.v1alpha1.IScheduleReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.scheduleRelease(request, options, callback);
  }
/**
 * This method can only be called on scheduled releases. The scheduling is
 * cancelled and the release is marked as a draft.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to cancel.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CancelReleaseResponse]{@link animeshon.release.v1alpha1.CancelReleaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.cancel_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_CancelRelease_async
 */
  cancelRelease(
      request?: protos.animeshon.release.v1alpha1.ICancelReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
        protos.animeshon.release.v1alpha1.ICancelReleaseRequest|undefined, {}|undefined
      ]>;
  cancelRelease(
      request: protos.animeshon.release.v1alpha1.ICancelReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
          protos.animeshon.release.v1alpha1.ICancelReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  cancelRelease(
      request: protos.animeshon.release.v1alpha1.ICancelReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
          protos.animeshon.release.v1alpha1.ICancelReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  cancelRelease(
      request?: protos.animeshon.release.v1alpha1.ICancelReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
          protos.animeshon.release.v1alpha1.ICancelReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
          protos.animeshon.release.v1alpha1.ICancelReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.ICancelReleaseResponse,
        protos.animeshon.release.v1alpha1.ICancelReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.cancelRelease(request, options, callback);
  }
/**
 * This method can only be called on published releases marked as active. Any
 * non-authoritative release associated to the specified release will also be
 * automatically marked as suspended.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the release to suspend.
 * @param {string} request.reason
 *   The reason why the release has been suspended.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SuspendReleaseResponse]{@link animeshon.release.v1alpha1.SuspendReleaseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.suspend_release.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_SuspendRelease_async
 */
  suspendRelease(
      request?: protos.animeshon.release.v1alpha1.ISuspendReleaseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
        protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|undefined, {}|undefined
      ]>;
  suspendRelease(
      request: protos.animeshon.release.v1alpha1.ISuspendReleaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
          protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  suspendRelease(
      request: protos.animeshon.release.v1alpha1.ISuspendReleaseRequest,
      callback: Callback<
          protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
          protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|null|undefined,
          {}|null|undefined>): void;
  suspendRelease(
      request?: protos.animeshon.release.v1alpha1.ISuspendReleaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
          protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
          protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.release.v1alpha1.ISuspendReleaseResponse,
        protos.animeshon.release.v1alpha1.ISuspendReleaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.suspendRelease(request, options, callback);
  }

 /**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent to list releases from.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Release]{@link animeshon.release.v1alpha1.Release}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listReleasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReleases(
      request?: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease[],
        protos.animeshon.release.v1alpha1.IListReleasesRequest|null,
        protos.animeshon.release.v1alpha1.IListReleasesResponse
      ]>;
  listReleases(
      request: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.release.v1alpha1.IListReleasesRequest,
          protos.animeshon.release.v1alpha1.IListReleasesResponse|null|undefined,
          protos.animeshon.release.v1alpha1.IRelease>): void;
  listReleases(
      request: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      callback: PaginationCallback<
          protos.animeshon.release.v1alpha1.IListReleasesRequest,
          protos.animeshon.release.v1alpha1.IListReleasesResponse|null|undefined,
          protos.animeshon.release.v1alpha1.IRelease>): void;
  listReleases(
      request?: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.release.v1alpha1.IListReleasesRequest,
          protos.animeshon.release.v1alpha1.IListReleasesResponse|null|undefined,
          protos.animeshon.release.v1alpha1.IRelease>,
      callback?: PaginationCallback<
          protos.animeshon.release.v1alpha1.IListReleasesRequest,
          protos.animeshon.release.v1alpha1.IListReleasesResponse|null|undefined,
          protos.animeshon.release.v1alpha1.IRelease>):
      Promise<[
        protos.animeshon.release.v1alpha1.IRelease[],
        protos.animeshon.release.v1alpha1.IListReleasesRequest|null,
        protos.animeshon.release.v1alpha1.IListReleasesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listReleases(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent to list releases from.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Release]{@link animeshon.release.v1alpha1.Release} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listReleasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReleasesStream(
      request?: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listReleases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReleases.createStream(
      this.innerApiCalls.listReleases as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listReleases`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent to list releases from.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Release]{@link animeshon.release.v1alpha1.Release}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/publisher.list_releases.js</caption>
 * region_tag:release_v1alpha1_generated_Publisher_ListReleases_async
 */
  listReleasesAsync(
      request?: protos.animeshon.release.v1alpha1.IListReleasesRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.release.v1alpha1.IRelease>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listReleases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReleases.asyncIterate(
      this.innerApiCalls['listReleases'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.animeshon.release.v1alpha1.IRelease>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.publisherStub && !this._terminated) {
      return this.publisherStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
