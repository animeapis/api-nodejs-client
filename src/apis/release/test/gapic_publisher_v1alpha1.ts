// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as publisherModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.PublisherClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = publisherModule.v1alpha1.PublisherClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = publisherModule.v1alpha1.PublisherClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = publisherModule.v1alpha1.PublisherClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new publisherModule.v1alpha1.PublisherClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.publisherStub, undefined);
            await client.initialize();
            assert(client.publisherStub);
        });

        it('has close method for the initialized client', done => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.publisherStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.publisherStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getRelease', () => {
        it('invokes getRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.getRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.getRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.GetReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.GetReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getRelease(request), expectedError);
        });
    });

    describe('createRelease', () => {
        it('invokes createRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.createRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.createRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.createRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CreateReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CreateReleaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createRelease(request), expectedError);
        });
    });

    describe('updateRelease', () => {
        it('invokes updateRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.updateRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.updateRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedHeaderRequestParams = `release.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UpdateReleaseRequest()
            );
            request.release ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UpdateReleaseRequest', ['release', 'name']);
            request.release.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateRelease(request), expectedError);
        });
    });

    describe('deleteRelease', () => {
        it('invokes deleteRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRelease(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.DeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.DeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteRelease(request), expectedError);
        });
    });

    describe('undeleteRelease', () => {
        it('invokes undeleteRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UndeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UndeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.undeleteRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.undeleteRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UndeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UndeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.Release()
            );
            client.innerApiCalls.undeleteRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UndeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UndeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.undeleteRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.undeleteRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes undeleteRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UndeleteReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UndeleteReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.undeleteRelease(request), expectedError);
        });
    });

    describe('publishRelease', () => {
        it('invokes publishRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.PublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseResponse()
            );
            client.innerApiCalls.publishRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.publishRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes publishRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.PublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseResponse()
            );
            client.innerApiCalls.publishRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.publishRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IPublishReleaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes publishRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.PublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.publishRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.publishRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.publishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes publishRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.PublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.PublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.publishRelease(request), expectedError);
        });
    });

    describe('unpublishRelease', () => {
        it('invokes unpublishRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UnpublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseResponse()
            );
            client.innerApiCalls.unpublishRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.unpublishRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes unpublishRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UnpublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseResponse()
            );
            client.innerApiCalls.unpublishRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.unpublishRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IUnpublishReleaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes unpublishRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UnpublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.unpublishRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.unpublishRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.unpublishRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes unpublishRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.UnpublishReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.UnpublishReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.unpublishRelease(request), expectedError);
        });
    });

    describe('scheduleRelease', () => {
        it('invokes scheduleRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ScheduleReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseResponse()
            );
            client.innerApiCalls.scheduleRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.scheduleRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes scheduleRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ScheduleReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseResponse()
            );
            client.innerApiCalls.scheduleRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.scheduleRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IScheduleReleaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes scheduleRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ScheduleReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.scheduleRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.scheduleRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.scheduleRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes scheduleRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ScheduleReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ScheduleReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.scheduleRelease(request), expectedError);
        });
    });

    describe('cancelRelease', () => {
        it('invokes cancelRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CancelReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseResponse()
            );
            client.innerApiCalls.cancelRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.cancelRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CancelReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseResponse()
            );
            client.innerApiCalls.cancelRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.cancelRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.ICancelReleaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CancelReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.cancelRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.cancelRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.CancelReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.CancelReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.cancelRelease(request), expectedError);
        });
    });

    describe('suspendRelease', () => {
        it('invokes suspendRelease without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.SuspendReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseResponse()
            );
            client.innerApiCalls.suspendRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.suspendRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRelease without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.SuspendReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseResponse()
            );
            client.innerApiCalls.suspendRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.suspendRelease(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.ISuspendReleaseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRelease with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.SuspendReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.suspendRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.suspendRelease(request), expectedError);
            const actualRequest = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.suspendRelease as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes suspendRelease with closed client', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.SuspendReleaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.SuspendReleaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.suspendRelease(request), expectedError);
        });
    });

    describe('listReleases', () => {
        it('invokes listReleases without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCall(expectedResponse);
            const [response] = await client.listReleases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases without error using callback', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReleases(
                    request,
                    (err?: Error|null, result?: protos.animeshon.release.v1alpha1.IRelease[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleases with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listReleases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReleases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listReleasesStream without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
            ];
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.release.v1alpha1.Release[] = [];
                stream.on('data', (response: protos.animeshon.release.v1alpha1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listReleasesStream with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.release.v1alpha1.Release[] = [];
                stream.on('data', (response: protos.animeshon.release.v1alpha1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listReleases without error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
              generateSampleMessage(new protos.animeshon.release.v1alpha1.Release()),
            ];
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.release.v1alpha1.IRelease[] = [];
            const iterable = client.listReleasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listReleases with error', async () => {
            const client = new publisherModule.v1alpha1.PublisherClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.release.v1alpha1.ListReleasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.release.v1alpha1.ListReleasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReleasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.release.v1alpha1.IRelease[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
});
