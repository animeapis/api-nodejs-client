// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/resource_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './resource_manager_client_config.json';

const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class ResourceManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  resourceManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ResourceManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ResourceManagerClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listOrganizations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'organizations'),
      listTeams:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'teams')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.resourcemanager.v1alpha1.ResourceManager', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.resourceManagerStub) {
      return this.resourceManagerStub;
    }

    // Put together the "service stub" for
    // animeshon.resourcemanager.v1alpha1.ResourceManager.
    this.resourceManagerStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.resourcemanager.v1alpha1.ResourceManager') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.resourcemanager.v1alpha1.ResourceManager,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const resourceManagerStubMethods =
        ['getOrganization', 'listOrganizations', 'createOrganization', 'updateOrganization', 'deleteOrganization', 'getTeam', 'listTeams', 'createTeam', 'updateTeam', 'deleteTeam'];
    for (const methodName of resourceManagerStubMethods) {
      const callPromise = this.resourceManagerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.resourceManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'resourcemanager.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'resourcemanager.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|undefined, {}|undefined
      ]>;
  getOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
  getOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the organization to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getOrganization(request);
 */
  getOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.IGetOrganizationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getOrganization(request, options, callback);
  }
  createOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|undefined, {}|undefined
      ]>;
  createOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
  createOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.resourcemanager.v1alpha1.Organization} request.organization
 *   The organization to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createOrganization(request);
 */
  createOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.ICreateOrganizationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createOrganization(request, options, callback);
  }
  updateOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|undefined, {}|undefined
      ]>;
  updateOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
  updateOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.resourcemanager.v1alpha1.Organization} request.organization
 *   The organization to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateOrganization(request);
 */
  updateOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.IOrganization,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization,
        protos.animeshon.resourcemanager.v1alpha1.IUpdateOrganizationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'organization.name': request.organization!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateOrganization(request, options, callback);
  }
  deleteOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|undefined, {}|undefined
      ]>;
  deleteOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteOrganization(
      request: protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the organization to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteOrganization(request);
 */
  deleteOrganization(
      request?: protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.resourcemanager.v1alpha1.IDeleteOrganizationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteOrganization(request, options, callback);
  }
  getTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|undefined, {}|undefined
      ]>;
  getTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|null|undefined,
          {}|null|undefined>): void;
  getTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the team to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Team]{@link animeshon.resourcemanager.v1alpha1.Team}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getTeam(request);
 */
  getTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.IGetTeamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getTeam(request, options, callback);
  }
  createTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|undefined, {}|undefined
      ]>;
  createTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|null|undefined,
          {}|null|undefined>): void;
  createTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.resourcemanager.v1alpha1.Team} request.team
 *   The team to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Team]{@link animeshon.resourcemanager.v1alpha1.Team}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createTeam(request);
 */
  createTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.ICreateTeamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createTeam(request, options, callback);
  }
  updateTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|undefined, {}|undefined
      ]>;
  updateTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|null|undefined,
          {}|null|undefined>): void;
  updateTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest,
      callback: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.resourcemanager.v1alpha1.Team} request.team
 *   The team to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Team]{@link animeshon.resourcemanager.v1alpha1.Team}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateTeam(request);
 */
  updateTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.resourcemanager.v1alpha1.ITeam,
          protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam,
        protos.animeshon.resourcemanager.v1alpha1.IUpdateTeamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'team.name': request.team!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateTeam(request, options, callback);
  }
  deleteTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|undefined, {}|undefined
      ]>;
  deleteTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTeam(
      request: protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the team to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteTeam(request);
 */
  deleteTeam(
      request?: protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.resourcemanager.v1alpha1.IDeleteTeamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTeam(request, options, callback);
  }

  listOrganizations(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization[],
        protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest|null,
        protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse
      ]>;
  listOrganizations(
      request: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.IOrganization>): void;
  listOrganizations(
      request: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      callback: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.IOrganization>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOrganizationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listOrganizations(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.IOrganization>,
      callback?: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.IOrganization>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.IOrganization[],
        protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest|null,
        protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listOrganizations(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOrganizationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listOrganizationsStream(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listOrganizations.createStream(
      this.innerApiCalls.listOrganizations as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOrganizations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Organization]{@link animeshon.resourcemanager.v1alpha1.Organization}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listOrganizationsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listOrganizationsAsync(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListOrganizationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.resourcemanager.v1alpha1.IOrganization>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listOrganizations.asyncIterate(
      this.innerApiCalls['listOrganizations'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.resourcemanager.v1alpha1.IOrganization>;
  }
  listTeams(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam[],
        protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest|null,
        protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse
      ]>;
  listTeams(
      request: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.ITeam>): void;
  listTeams(
      request: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      callback: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.ITeam>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Team]{@link animeshon.resourcemanager.v1alpha1.Team}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTeamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTeams(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.ITeam>,
      callback?: PaginationCallback<
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
          protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse|null|undefined,
          protos.animeshon.resourcemanager.v1alpha1.ITeam>):
      Promise<[
        protos.animeshon.resourcemanager.v1alpha1.ITeam[],
        protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest|null,
        protos.animeshon.resourcemanager.v1alpha1.IListTeamsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listTeams(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Team]{@link animeshon.resourcemanager.v1alpha1.Team} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTeamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTeamsStream(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTeams.createStream(
      this.innerApiCalls.listTeams as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTeams`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Team]{@link animeshon.resourcemanager.v1alpha1.Team}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listTeamsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listTeamsAsync(
      request?: protos.animeshon.resourcemanager.v1alpha1.IListTeamsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.resourcemanager.v1alpha1.ITeam>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTeams.asyncIterate(
      this.innerApiCalls['listTeams'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.resourcemanager.v1alpha1.ITeam>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.resourceManagerStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
