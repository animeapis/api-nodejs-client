// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/web_cache_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './web_cache_client_config.json';

const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class WebCacheClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  webCacheStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WebCacheClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof WebCacheClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCaches:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'caches')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.webcache.v1alpha1.WebCache', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.webCacheStub) {
      return this.webCacheStub;
    }

    // Put together the "service stub" for
    // animeshon.webcache.v1alpha1.WebCache.
    this.webCacheStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.webcache.v1alpha1.WebCache') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.webcache.v1alpha1.WebCache,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const webCacheStubMethods =
        ['createCache', 'listCaches', 'getCache', 'deleteCache'];
    for (const methodName of webCacheStubMethods) {
      const callPromise = this.webCacheStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.webCacheStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'webcache.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'webcache.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createCache(
      request?: protos.animeshon.webcache.v1alpha1.ICreateCacheRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache,
        protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|undefined, {}|undefined
      ]>;
  createCache(
      request: protos.animeshon.webcache.v1alpha1.ICreateCacheRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|null|undefined,
          {}|null|undefined>): void;
  createCache(
      request: protos.animeshon.webcache.v1alpha1.ICreateCacheRequest,
      callback: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.webcache.v1alpha1.Cache} request.cache
 *   The cache to be created.
 * @param {google.protobuf.Duration} request.ttl
 *   The time-to-live indicating how long this cache should be considered valid.
 *   If set to zero, the cache will not have an expiration time.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Cache]{@link animeshon.webcache.v1alpha1.Cache}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createCache(request);
 */
  createCache(
      request?: protos.animeshon.webcache.v1alpha1.ICreateCacheRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache,
        protos.animeshon.webcache.v1alpha1.ICreateCacheRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createCache(request, options, callback);
  }
  getCache(
      request?: protos.animeshon.webcache.v1alpha1.IGetCacheRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache,
        protos.animeshon.webcache.v1alpha1.IGetCacheRequest|undefined, {}|undefined
      ]>;
  getCache(
      request: protos.animeshon.webcache.v1alpha1.IGetCacheRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.IGetCacheRequest|null|undefined,
          {}|null|undefined>): void;
  getCache(
      request: protos.animeshon.webcache.v1alpha1.IGetCacheRequest,
      callback: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.IGetCacheRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * See https://google.aip.dev/162#referencing-revisions for more information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the requested cache.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Cache]{@link animeshon.webcache.v1alpha1.Cache}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getCache(request);
 */
  getCache(
      request?: protos.animeshon.webcache.v1alpha1.IGetCacheRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.IGetCacheRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.webcache.v1alpha1.ICache,
          protos.animeshon.webcache.v1alpha1.IGetCacheRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache,
        protos.animeshon.webcache.v1alpha1.IGetCacheRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCache(request, options, callback);
  }
  deleteCache(
      request?: protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|undefined, {}|undefined
      ]>;
  deleteCache(
      request: protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCache(
      request: protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|null|undefined,
          {}|null|undefined>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the cache to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteCache(request);
 */
  deleteCache(
      request?: protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.webcache.v1alpha1.IDeleteCacheRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteCache(request, options, callback);
  }

  listCaches(
      request?: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache[],
        protos.animeshon.webcache.v1alpha1.IListCachesRequest|null,
        protos.animeshon.webcache.v1alpha1.IListCachesResponse
      ]>;
  listCaches(
      request: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.webcache.v1alpha1.IListCachesRequest,
          protos.animeshon.webcache.v1alpha1.IListCachesResponse|null|undefined,
          protos.animeshon.webcache.v1alpha1.ICache>): void;
  listCaches(
      request: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      callback: PaginationCallback<
          protos.animeshon.webcache.v1alpha1.IListCachesRequest,
          protos.animeshon.webcache.v1alpha1.IListCachesResponse|null|undefined,
          protos.animeshon.webcache.v1alpha1.ICache>): void;
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 *
 *   Currently accepted filters include:
 *   - uri:{absolute uri}
 *   - resource:{full resource name}
 * @param {boolean} request.onlyLatestRevision
 *   Whether to return only the latest revision for each cache.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Cache]{@link animeshon.webcache.v1alpha1.Cache}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCachesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCaches(
      request?: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.webcache.v1alpha1.IListCachesRequest,
          protos.animeshon.webcache.v1alpha1.IListCachesResponse|null|undefined,
          protos.animeshon.webcache.v1alpha1.ICache>,
      callback?: PaginationCallback<
          protos.animeshon.webcache.v1alpha1.IListCachesRequest,
          protos.animeshon.webcache.v1alpha1.IListCachesResponse|null|undefined,
          protos.animeshon.webcache.v1alpha1.ICache>):
      Promise<[
        protos.animeshon.webcache.v1alpha1.ICache[],
        protos.animeshon.webcache.v1alpha1.IListCachesRequest|null,
        protos.animeshon.webcache.v1alpha1.IListCachesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listCaches(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 *
 *   Currently accepted filters include:
 *   - uri:{absolute uri}
 *   - resource:{full resource name}
 * @param {boolean} request.onlyLatestRevision
 *   Whether to return only the latest revision for each cache.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Cache]{@link animeshon.webcache.v1alpha1.Cache} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCachesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCachesStream(
      request?: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCaches.createStream(
      this.innerApiCalls.listCaches as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCaches`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 *
 *   Currently accepted filters include:
 *   - uri:{absolute uri}
 *   - resource:{full resource name}
 * @param {boolean} request.onlyLatestRevision
 *   Whether to return only the latest revision for each cache.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Cache]{@link animeshon.webcache.v1alpha1.Cache}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listCachesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listCachesAsync(
      request?: protos.animeshon.webcache.v1alpha1.IListCachesRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.webcache.v1alpha1.ICache>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listCaches.asyncIterate(
      this.innerApiCalls['listCaches'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.webcache.v1alpha1.ICache>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.webCacheStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
