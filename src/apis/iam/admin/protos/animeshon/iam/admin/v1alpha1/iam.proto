syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

import "graphql/options.proto";
import "openapi/v3/annotations.proto";

package animeshon.iam.admin.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/iam/admin/v1alpha1;admin";
option java_package = "com.animeshon.iam.admin.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::IAM::Admin::v1Alpha1";

service IAM {
  option (google.api.default_host) = "iam.animeapis.com";

  rpc GetServiceAccount(GetServiceAccountRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/serviceAccounts/*}"
      additional_bindings {
        get: "/v1alpha1/{name=organizations/*/serviceAccounts/*}"
      }
    };
    option (graphql.method) = {
      field: "getServiceAccount"
      operation: "query"
    };
  }

  rpc ListServiceAccounts(ListServiceAccountsRequest) returns (ListServiceAccountsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*}/serviceAccounts"
      additional_bindings {
        get: "/v1alpha1/{parent=organizations/*}/serviceAccounts"
      }
    };
    option (graphql.method) = {
      field: "listServiceAccounts"
      operation: "query"
    };
  }

  rpc CreateServiceAccount(CreateServiceAccountRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      post: "/v1alpha1/{service_account.name=users/*/serviceAccounts/*}"
      body: "*"
      additional_bindings {
        post: "/v1alpha1/{service_account.name=organizations/*/serviceAccounts/*}"
        body: "*"
      }
    };
    option (graphql.method) = {
      field: "createServiceAccount"
      operation: "mutation"
    };
  }

  rpc UpdateServiceAccount(UpdateServiceAccountRequest) returns (ServiceAccount) {
    option (google.api.http) = {
      patch: "/v1alpha1/{service_account.name=users/*/serviceAccounts/*}"
      body: "*"
      additional_bindings {
        patch: "/v1alpha1/{service_account.name=organizations/*/serviceAccounts/*}"
        body: "*"
      }
    };
    option (graphql.method) = {
      field: "updateServiceAccount"
      operation: "mutation"
    };
  }

  rpc DeleteServiceAccount(DeleteServiceAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*/serviceAccounts/*}"
      additional_bindings {
        delete: "/v1alpha1/{name=organizations/*/serviceAccounts/*}"
      }
    };
    option (graphql.method) = {
      field: "deleteServiceAccount"
      operation: "mutation"
    };
  }

  // rpc QueryGrantableRoles(QueryGrantableRolesRequest) returns (QueryGrantableRolesResponse) {
  //   option (google.api.http) = {
  //     post: "/v1alpha1/roles:queryGrantableRoles"
  //     body: "*"
  //   };
  // }

  rpc GetRole(GetRoleRequest) returns (Role) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=roles/*}"
    };
    option (graphql.method) = {
      field: "getRole"
      operation: "query"
    };
  }

  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/roles"
    };
    option (graphql.method) = {
      field: "listRoles"
      operation: "query"
    };
  }

  rpc CreateRole(CreateRoleRequest) returns (Role) {
    option (google.api.http) = {
      post: "/v1alpha1/{role.name=roles/*}"
      body: "*"
    };
    option (graphql.method) = {
      field: "createRole"
      operation: "mutation"
    };
  }

  rpc UpdateRole(UpdateRoleRequest) returns (Role) {
    option (google.api.http) = {
      patch: "/v1alpha1/{role.name=roles/*}"
      body: "*"
    };
    option (graphql.method) = {
      field: "updateRole"
      operation: "mutation"
    };
  }

  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=roles/*}"
    };
    option (graphql.method) = {
      field: "deleteRole"
      operation: "mutation"
    };
  }

  // rpc QueryTestablePermissions(QueryTestablePermissionsRequest) returns (QueryTestablePermissionsResponse) {
  //   option (google.api.http) = {
  //     post: "/v1alpha1/permissions:queryTestablePermissions"
  //     body: "*"
  //   };
  // }

  rpc GetPermission(GetPermissionRequest) returns (Permission) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=permissions/*}"
    };
    option (graphql.method) = {
      field: "getPermission"
      operation: "query"
    };
  }

  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/permissions"
    };
    option (graphql.method) = {
      field: "listPermissions"
      operation: "query"
    };
  }

  rpc CreatePermission(CreatePermissionRequest) returns (Permission) {
    option (google.api.http) = {
      post: "/v1alpha1/{permission.name=permissions/*}"
      body: "*"
    };
    option (graphql.method) = {
      field: "createPermission"
      operation: "mutation"
    };
  }

  rpc UpdatePermission(UpdatePermissionRequest) returns (Permission) {
    option (google.api.http) = {
      patch: "/v1alpha1/{permission.name=permissions/*}"
      body: "*"
    };
    option (graphql.method) = {
      field: "updatePermission"
      operation: "mutation"
    };
  }

  rpc DeletePermission(DeletePermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=permissions/*}"
    };
    option (graphql.method) = {
      field: "deletePermission"
      operation: "mutation"
    };
  }
}

message ServiceAccount {
  // The name of the service account.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The unique, stable numeric ID for the service account.
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The display name of this service account.
  string display_name = 3;

  // A brief description of what this service account is used for.
  string description = 4;

  // OAuth2 client ID to use for the authentication flow.
  string oauth2_client_id = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // OAuth2 client secret to use for the authentication flow.
  string oauth2_client_secret = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message Role {
  // The name of the role.
  string name = 1;

  // The display name of this role.
  string display_name = 2;

  // A brief description of what this role is used for.
  string description = 3;

  // The names of the permissions this role grants when bound in an IAM policy.
  repeated string included_permissions = 4;

  // Used to perform a consistent read-modify-write.
  bytes etag = 5;
}

message Permission {
  // The name of this permission.
  string name = 1;

  // The display name of this permission.
  string display_name = 2;

  // A brief description of what this permission is used for.
  string description = 3;
}

message GetServiceAccountRequest {
  // The name of the service account to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/ServiceAccount"
    }
  ];
}

message ListServiceAccountsRequest {
  // The parent, which owns this collection of service accounts.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "*"
    }
  ];

  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // The value returned from the previous call.
  string page_token = 3;

  // A filter to be applied to results.
  string filter = 4;
}

message ListServiceAccountsResponse {
  // The list of service accounts.
  repeated ServiceAccount service_accounts = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateServiceAccountRequest {
  // The service account to create.
  ServiceAccount service_account = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/ServiceAccount"
    }
  ];
}

message UpdateServiceAccountRequest {
  // The service account to update.
  ServiceAccount service_account = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteServiceAccountRequest {
  // The name of the service account to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/ServiceAccount"
    }
  ];
}

message GetRoleRequest {
  // The name of the role to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Role"
    }
  ];
}

message ListRolesRequest {
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // The value returned from the previous call.
  string page_token = 2;

  // A filter to be applied to results.
  string filter = 3;
}

message ListRolesResponse {
  // The list of roles.
  repeated Role roles = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateRoleRequest {
  // The role to create.
  Role role = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Role"
    }
  ];
}

message UpdateRoleRequest {
  // The role to update.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteRoleRequest {
  // The name of the role to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Role"
    }
  ];
}

message GetPermissionRequest {
  // The name of the permission to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Permission"
    }
  ];
}

message ListPermissionsRequest {
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // The value returned from the previous call.
  string page_token = 2;

  // A filter to be applied to results.
  string filter = 3;
}

message ListPermissionsResponse {
  // The list of permissions.
  repeated Permission permissions = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreatePermissionRequest {
  // The permission to create.
  Permission permission = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Permission"
    }
  ];
}

message UpdatePermissionRequest {
  // The permission to update.
  Permission permission = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeletePermissionRequest {
  // The name of the permission to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "iam.animeapis.com/Permission"
    }
  ];
}

// TODO: auto-generate openapi authentication security scheme.
option (openapi.v3.document) = {
  info: {
    title: "Identity and Access Management API";
    version: "v1alpha1";
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "OAuth2";
          value: {
            security_scheme: {
              type: "oauth2";
              flows: {
                client_credentials: {
                  token_url: "https://accounts.animeshon.com/o/oauth2/token";
                  scopes: {};
                }
                authorization_code: {
                  authorization_url: "https://accounts.animeshon.com/o/oauth2/auth";
                  token_url: "https://accounts.animeshon.com/o/oauth2/token";
                  scopes: {
                    additional_properties: [
                      {
                        name: "https://www.animeapis.com/auth/iam",
                        value: "View and manage roles, permissions, and service accounts."
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    }
  }
};
