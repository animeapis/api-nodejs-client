// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/i_a_m_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './i_a_m_client_config.json';

const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class IAMClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iAMStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IAMClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof IAMClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServiceAccounts:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'serviceAccounts'),
      listRoles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'roles'),
      listPermissions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'permissions')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.iam.admin.v1alpha1.IAM', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.iAMStub) {
      return this.iAMStub;
    }

    // Put together the "service stub" for
    // animeshon.iam.admin.v1alpha1.IAM.
    this.iAMStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.iam.admin.v1alpha1.IAM') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.iam.admin.v1alpha1.IAM,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const iAMStubMethods =
        ['getServiceAccount', 'listServiceAccounts', 'createServiceAccount', 'updateServiceAccount', 'deleteServiceAccount', 'getRole', 'listRoles', 'createRole', 'updateRole', 'deleteRole', 'getPermission', 'listPermissions', 'createPermission', 'updatePermission', 'deletePermission'];
    for (const methodName of iAMStubMethods) {
      const callPromise = this.iAMStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.iAMStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'iam.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'iam.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the service account to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.get_service_account.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_GetServiceAccount_async
 */
  getServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|undefined, {}|undefined
      ]>;
  getServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.IGetServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getServiceAccount(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.ServiceAccount} request.serviceAccount
 *   The service account to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.create_service_account.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_CreateServiceAccount_async
 */
  createServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|undefined, {}|undefined
      ]>;
  createServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  createServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  createServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.ICreateServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'service_account.name': request.serviceAccount!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createServiceAccount(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.ServiceAccount} request.serviceAccount
 *   The service account to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.update_service_account.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_UpdateServiceAccount_async
 */
  updateServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|undefined, {}|undefined
      ]>;
  updateServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  updateServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  updateServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
          protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount,
        protos.animeshon.iam.admin.v1alpha1.IUpdateServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'service_account.name': request.serviceAccount!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateServiceAccount(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the service account to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.delete_service_account.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_DeleteServiceAccount_async
 */
  deleteServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|undefined, {}|undefined
      ]>;
  deleteServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  deleteServiceAccount(
      request: protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  deleteServiceAccount(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeleteServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteServiceAccount(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the role to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.iam.admin.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.get_role.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_GetRole_async
 */
  getRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|undefined, {}|undefined
      ]>;
  getRole(
      request: protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
  getRole(
      request: protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
  getRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.IGetRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getRole(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.Role} request.role
 *   The role to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.iam.admin.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.create_role.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_CreateRole_async
 */
  createRole(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|undefined, {}|undefined
      ]>;
  createRole(
      request: protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  createRole(
      request: protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  createRole(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.ICreateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'role.name': request.role!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createRole(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.Role} request.role
 *   The role to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.iam.admin.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.update_role.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_UpdateRole_async
 */
  updateRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|undefined, {}|undefined
      ]>;
  updateRole(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  updateRole(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  updateRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IRole,
          protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole,
        protos.animeshon.iam.admin.v1alpha1.IUpdateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'role.name': request.role!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateRole(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the role to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.delete_role.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_DeleteRole_async
 */
  deleteRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|undefined, {}|undefined
      ]>;
  deleteRole(
      request: protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRole(
      request: protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRole(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeleteRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteRole(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the permission to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Permission]{@link animeshon.iam.admin.v1alpha1.Permission}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.get_permission.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_GetPermission_async
 */
  getPermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|undefined, {}|undefined
      ]>;
  getPermission(
      request: protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|null|undefined,
          {}|null|undefined>): void;
  getPermission(
      request: protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|null|undefined,
          {}|null|undefined>): void;
  getPermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.IGetPermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getPermission(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.Permission} request.permission
 *   The permission to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Permission]{@link animeshon.iam.admin.v1alpha1.Permission}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.create_permission.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_CreatePermission_async
 */
  createPermission(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|undefined, {}|undefined
      ]>;
  createPermission(
      request: protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  createPermission(
      request: protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  createPermission(
      request?: protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.ICreatePermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'permission.name': request.permission!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createPermission(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.iam.admin.v1alpha1.Permission} request.permission
 *   The permission to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Permission]{@link animeshon.iam.admin.v1alpha1.Permission}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.update_permission.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_UpdatePermission_async
 */
  updatePermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|undefined, {}|undefined
      ]>;
  updatePermission(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  updatePermission(
      request: protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest,
      callback: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  updatePermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.iam.admin.v1alpha1.IPermission,
          protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission,
        protos.animeshon.iam.admin.v1alpha1.IUpdatePermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'permission.name': request.permission!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updatePermission(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the permission to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.delete_permission.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_DeletePermission_async
 */
  deletePermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|undefined, {}|undefined
      ]>;
  deletePermission(
      request: protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  deletePermission(
      request: protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  deletePermission(
      request?: protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.iam.admin.v1alpha1.IDeletePermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deletePermission(request, options, callback);
  }

 /**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of service accounts.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listServiceAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listServiceAccounts(
      request?: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount[],
        protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse
      ]>;
  listServiceAccounts(
      request: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount>): void;
  listServiceAccounts(
      request: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount>): void;
  listServiceAccounts(
      request?: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount>,
      callback?: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IServiceAccount>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IServiceAccount[],
        protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listServiceAccounts(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of service accounts.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listServiceAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listServiceAccountsStream(
      request?: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listServiceAccounts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceAccounts.createStream(
      this.innerApiCalls.listServiceAccounts as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listServiceAccounts`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of service accounts.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ServiceAccount]{@link animeshon.iam.admin.v1alpha1.ServiceAccount}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.list_service_accounts.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_ListServiceAccounts_async
 */
  listServiceAccountsAsync(
      request?: protos.animeshon.iam.admin.v1alpha1.IListServiceAccountsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IServiceAccount>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listServiceAccounts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceAccounts.asyncIterate(
      this.innerApiCalls['listServiceAccounts'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IServiceAccount>;
  }
 /**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Role]{@link animeshon.iam.admin.v1alpha1.Role}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listRoles(
      request?: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole[],
        protos.animeshon.iam.admin.v1alpha1.IListRolesRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListRolesResponse
      ]>;
  listRoles(
      request: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
          protos.animeshon.iam.admin.v1alpha1.IListRolesResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IRole>): void;
  listRoles(
      request: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
          protos.animeshon.iam.admin.v1alpha1.IListRolesResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IRole>): void;
  listRoles(
      request?: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
          protos.animeshon.iam.admin.v1alpha1.IListRolesResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IRole>,
      callback?: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
          protos.animeshon.iam.admin.v1alpha1.IListRolesResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IRole>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IRole[],
        protos.animeshon.iam.admin.v1alpha1.IListRolesRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListRolesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listRoles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Role]{@link animeshon.iam.admin.v1alpha1.Role} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listRolesStream(
      request?: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listRoles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRoles.createStream(
      this.innerApiCalls.listRoles as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listRoles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Role]{@link animeshon.iam.admin.v1alpha1.Role}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.list_roles.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_ListRoles_async
 */
  listRolesAsync(
      request?: protos.animeshon.iam.admin.v1alpha1.IListRolesRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IRole>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listRoles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRoles.asyncIterate(
      this.innerApiCalls['listRoles'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IRole>;
  }
 /**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Permission]{@link animeshon.iam.admin.v1alpha1.Permission}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPermissionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPermissions(
      request?: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission[],
        protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse
      ]>;
  listPermissions(
      request: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IPermission>): void;
  listPermissions(
      request: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      callback: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IPermission>): void;
  listPermissions(
      request?: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IPermission>,
      callback?: PaginationCallback<
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
          protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse|null|undefined,
          protos.animeshon.iam.admin.v1alpha1.IPermission>):
      Promise<[
        protos.animeshon.iam.admin.v1alpha1.IPermission[],
        protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest|null,
        protos.animeshon.iam.admin.v1alpha1.IListPermissionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listPermissions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Permission]{@link animeshon.iam.admin.v1alpha1.Permission} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPermissionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPermissionsStream(
      request?: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listPermissions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPermissions.createStream(
      this.innerApiCalls.listPermissions as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPermissions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Permission]{@link animeshon.iam.admin.v1alpha1.Permission}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/i_a_m.list_permissions.js</caption>
 * region_tag:iam_v1alpha1_generated_IAM_ListPermissions_async
 */
  listPermissionsAsync(
      request?: protos.animeshon.iam.admin.v1alpha1.IListPermissionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IPermission>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listPermissions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPermissions.asyncIterate(
      this.innerApiCalls['listPermissions'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.iam.admin.v1alpha1.IPermission>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.iAMStub && !this._terminated) {
      return this.iAMStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
