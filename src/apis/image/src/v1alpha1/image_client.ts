// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/image_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './image_client_config.json';

const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class ImageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  imageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ImageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ImageClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAlbums:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'albums')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.image.v1alpha1.Image', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.imageStub) {
      return this.imageStub;
    }

    // Put together the "service stub" for
    // animeshon.image.v1alpha1.Image.
    this.imageStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.image.v1alpha1.Image') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.image.v1alpha1.Image,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const imageStubMethods =
        ['uploadImage', 'importImage', 'getImage', 'getAlbum', 'listAlbums', 'createAlbum', 'deleteAlbum', 'getAlbumSettings', 'updateAlbumSettings'];
    for (const methodName of imageStubMethods) {
      const callPromise = this.imageStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.imageStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'image.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'image.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  uploadImage(
      request?: protos.animeshon.image.v1alpha1.IUploadImageRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IUploadImageResponse,
        protos.animeshon.image.v1alpha1.IUploadImageRequest|undefined, {}|undefined
      ]>;
  uploadImage(
      request: protos.animeshon.image.v1alpha1.IUploadImageRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IUploadImageResponse,
          protos.animeshon.image.v1alpha1.IUploadImageRequest|null|undefined,
          {}|null|undefined>): void;
  uploadImage(
      request: protos.animeshon.image.v1alpha1.IUploadImageRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IUploadImageResponse,
          protos.animeshon.image.v1alpha1.IUploadImageRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Uploads an image through the request HttpBody.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The image parent of the image. This value defaults to the user performing
 *   the upload operation if no parent is set.
 * @param {google.api.HttpBody} request.body
 *   The image content, represented as an HttpBody.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UploadImageResponse]{@link animeshon.image.v1alpha1.UploadImageResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.uploadImage(request);
 */
  uploadImage(
      request?: protos.animeshon.image.v1alpha1.IUploadImageRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IUploadImageResponse,
          protos.animeshon.image.v1alpha1.IUploadImageRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IUploadImageResponse,
          protos.animeshon.image.v1alpha1.IUploadImageRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IUploadImageResponse,
        protos.animeshon.image.v1alpha1.IUploadImageRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.uploadImage(request, options, callback);
  }
  importImage(
      request?: protos.animeshon.image.v1alpha1.IImportImageRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IImportImageResponse,
        protos.animeshon.image.v1alpha1.IImportImageRequest|undefined, {}|undefined
      ]>;
  importImage(
      request: protos.animeshon.image.v1alpha1.IImportImageRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IImportImageResponse,
          protos.animeshon.image.v1alpha1.IImportImageRequest|null|undefined,
          {}|null|undefined>): void;
  importImage(
      request: protos.animeshon.image.v1alpha1.IImportImageRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IImportImageResponse,
          protos.animeshon.image.v1alpha1.IImportImageRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Imports an image from a remote web address.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The image parent of the image. This value defaults to the user performing
 *   the import operation if no parent is set.
 * @param {string} request.uri
 *   A publicly-accessible image HTTP/HTTPS URL. When fetching images from
 *   HTTP/HTTPS URLs, Animeshon cannot guarantee that the request will be
 *   completed. Your request may fail if the specified host denies the
 *   request (e.g. due to request throttling or DoS prevention), or if
 *   Animeshon throttles requests to the site for abuse prevention. You should
 *   not depend on externally-hosted images for production applications.
 * @param {animeshon.image.v1alpha1.ImportImageRequest.WebCacheOptions} [request.cacheOptions]
 *   The web cache options to apply to the import request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ImportImageResponse]{@link animeshon.image.v1alpha1.ImportImageResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.importImage(request);
 */
  importImage(
      request?: protos.animeshon.image.v1alpha1.IImportImageRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IImportImageResponse,
          protos.animeshon.image.v1alpha1.IImportImageRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IImportImageResponse,
          protos.animeshon.image.v1alpha1.IImportImageRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IImportImageResponse,
        protos.animeshon.image.v1alpha1.IImportImageRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.importImage(request, options, callback);
  }
  getImage(
      request?: protos.animeshon.image.v1alpha1.IGetImageRequest,
      options?: CallOptions):
      Promise<[
        protos.google.api.IHttpBody,
        protos.animeshon.image.v1alpha1.IGetImageRequest|undefined, {}|undefined
      ]>;
  getImage(
      request: protos.animeshon.image.v1alpha1.IGetImageRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.api.IHttpBody,
          protos.animeshon.image.v1alpha1.IGetImageRequest|null|undefined,
          {}|null|undefined>): void;
  getImage(
      request: protos.animeshon.image.v1alpha1.IGetImageRequest,
      callback: Callback<
          protos.google.api.IHttpBody,
          protos.animeshon.image.v1alpha1.IGetImageRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets an image in binary representation with the format and size requested.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The image resource name.
 * @param {string} [request.contentType]
 *   If content type is set and differs from the original content type the image
 *   will be converted to match the specified content type.
 *
 *   Note: only "image/png", "image/webp", "image/jpeg" are supported values.
 * @param {animeshon.image.v1alpha1.GetImageRequest.ResizeBounds} [request.resize]
 *   The image bounding box to use for resizing. This value is normally used
 *   to request image thumbnails. If both width and height are defined then the
 *   value with smaller ratio will be used to resize the image. The resized
 *   image has the closest standard ratio to the requested width or height.
 *   If the requested ratio is larger than the original image it is ignored.
 * @param {boolean} [request.blur]
 *   Whether the image returned should be blurred. This is typically used while
 *   routing images that have been detected to contain highly sensitive or
 *   controversial content that must be censored in some or all regions.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [HttpBody]{@link google.api.HttpBody}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getImage(request);
 */
  getImage(
      request?: protos.animeshon.image.v1alpha1.IGetImageRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.api.IHttpBody,
          protos.animeshon.image.v1alpha1.IGetImageRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.api.IHttpBody,
          protos.animeshon.image.v1alpha1.IGetImageRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.api.IHttpBody,
        protos.animeshon.image.v1alpha1.IGetImageRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getImage(request, options, callback);
  }
  getAlbum(
      request?: protos.animeshon.image.v1alpha1.IGetAlbumRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum,
        protos.animeshon.image.v1alpha1.IGetAlbumRequest|undefined, {}|undefined
      ]>;
  getAlbum(
      request: protos.animeshon.image.v1alpha1.IGetAlbumRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.IGetAlbumRequest|null|undefined,
          {}|null|undefined>): void;
  getAlbum(
      request: protos.animeshon.image.v1alpha1.IGetAlbumRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.IGetAlbumRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets an image album.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the album to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Album]{@link animeshon.image.v1alpha1.Album}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getAlbum(request);
 */
  getAlbum(
      request?: protos.animeshon.image.v1alpha1.IGetAlbumRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.IGetAlbumRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.IGetAlbumRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum,
        protos.animeshon.image.v1alpha1.IGetAlbumRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getAlbum(request, options, callback);
  }
  createAlbum(
      request?: protos.animeshon.image.v1alpha1.ICreateAlbumRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum,
        protos.animeshon.image.v1alpha1.ICreateAlbumRequest|undefined, {}|undefined
      ]>;
  createAlbum(
      request: protos.animeshon.image.v1alpha1.ICreateAlbumRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.ICreateAlbumRequest|null|undefined,
          {}|null|undefined>): void;
  createAlbum(
      request: protos.animeshon.image.v1alpha1.ICreateAlbumRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.ICreateAlbumRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new image album.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent this album belongs to.
 * @param {animeshon.image.v1alpha1.Album} request.album
 *   The album to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Album]{@link animeshon.image.v1alpha1.Album}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createAlbum(request);
 */
  createAlbum(
      request?: protos.animeshon.image.v1alpha1.ICreateAlbumRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.ICreateAlbumRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IAlbum,
          protos.animeshon.image.v1alpha1.ICreateAlbumRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum,
        protos.animeshon.image.v1alpha1.ICreateAlbumRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createAlbum(request, options, callback);
  }
  deleteAlbum(
      request?: protos.animeshon.image.v1alpha1.IDeleteAlbumRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|undefined, {}|undefined
      ]>;
  deleteAlbum(
      request: protos.animeshon.image.v1alpha1.IDeleteAlbumRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|null|undefined,
          {}|null|undefined>): void;
  deleteAlbum(
      request: protos.animeshon.image.v1alpha1.IDeleteAlbumRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes an existing image album.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The album to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteAlbum(request);
 */
  deleteAlbum(
      request?: protos.animeshon.image.v1alpha1.IDeleteAlbumRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.image.v1alpha1.IDeleteAlbumRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteAlbum(request, options, callback);
  }
  getAlbumSettings(
      request?: protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbumSettings,
        protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|undefined, {}|undefined
      ]>;
  getAlbumSettings(
      request: protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getAlbumSettings(
      request: protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the settings of an image album.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the album to retrieve settings from.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AlbumSettings]{@link animeshon.image.v1alpha1.AlbumSettings}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getAlbumSettings(request);
 */
  getAlbumSettings(
      request?: protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbumSettings,
        protos.animeshon.image.v1alpha1.IGetAlbumSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getAlbumSettings(request, options, callback);
  }
  updateAlbumSettings(
      request?: protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbumSettings,
        protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|undefined, {}|undefined
      ]>;
  updateAlbumSettings(
      request: protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateAlbumSettings(
      request: protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest,
      callback: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the settings of an image album.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.image.v1alpha1.AlbumSettings} request.settings
 *   The album settings to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AlbumSettings]{@link animeshon.image.v1alpha1.AlbumSettings}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateAlbumSettings(request);
 */
  updateAlbumSettings(
      request?: protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.image.v1alpha1.IAlbumSettings,
          protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbumSettings,
        protos.animeshon.image.v1alpha1.IUpdateAlbumSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'settings.name': request.settings!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateAlbumSettings(request, options, callback);
  }

  listAlbums(
      request?: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum[],
        protos.animeshon.image.v1alpha1.IListAlbumsRequest|null,
        protos.animeshon.image.v1alpha1.IListAlbumsResponse
      ]>;
  listAlbums(
      request: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.image.v1alpha1.IListAlbumsRequest,
          protos.animeshon.image.v1alpha1.IListAlbumsResponse|null|undefined,
          protos.animeshon.image.v1alpha1.IAlbum>): void;
  listAlbums(
      request: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      callback: PaginationCallback<
          protos.animeshon.image.v1alpha1.IListAlbumsRequest,
          protos.animeshon.image.v1alpha1.IListAlbumsResponse|null|undefined,
          protos.animeshon.image.v1alpha1.IAlbum>): void;
/**
 * Lists image albums with pagination.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of albums.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Album]{@link animeshon.image.v1alpha1.Album}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAlbumsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAlbums(
      request?: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.image.v1alpha1.IListAlbumsRequest,
          protos.animeshon.image.v1alpha1.IListAlbumsResponse|null|undefined,
          protos.animeshon.image.v1alpha1.IAlbum>,
      callback?: PaginationCallback<
          protos.animeshon.image.v1alpha1.IListAlbumsRequest,
          protos.animeshon.image.v1alpha1.IListAlbumsResponse|null|undefined,
          protos.animeshon.image.v1alpha1.IAlbum>):
      Promise<[
        protos.animeshon.image.v1alpha1.IAlbum[],
        protos.animeshon.image.v1alpha1.IListAlbumsRequest|null,
        protos.animeshon.image.v1alpha1.IListAlbumsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listAlbums(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of albums.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Album]{@link animeshon.image.v1alpha1.Album} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAlbumsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAlbumsStream(
      request?: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAlbums.createStream(
      this.innerApiCalls.listAlbums as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAlbums`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent, which owns this collection of albums.
 * @param {number} request.pageSize
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {string} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Album]{@link animeshon.image.v1alpha1.Album}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listAlbumsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listAlbumsAsync(
      request?: protos.animeshon.image.v1alpha1.IListAlbumsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.image.v1alpha1.IAlbum>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAlbums.asyncIterate(
      this.innerApiCalls['listAlbums'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.image.v1alpha1.IAlbum>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.imageStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
