// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/referrer_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './referrer_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1alpha1
 */
export class ReferrerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  referrerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ReferrerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ReferrerClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      crossRefPathTemplate: new this._gaxModule.PathTemplate(
        '{collection}/{crossref}'
      ),
      universePathTemplate: new this._gaxModule.PathTemplate(
        'universes/{universe}'
      ),
      wormholePathTemplate: new this._gaxModule.PathTemplate(
        'namespaces/{namespace}/{kind}/{id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCrossRefs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'crossrefs')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const analyzeCrossRefsResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefsResponse') as gax.protobuf.Type;
    const analyzeCrossRefsMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const importCrossRefsResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.ImportCrossRefsResponse') as gax.protobuf.Type;
    const importCrossRefsMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const exportCrossRefsResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.ExportCrossRefsResponse') as gax.protobuf.Type;
    const exportCrossRefsMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const initializeCrossRefsResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.InitializeCrossRefsResponse') as gax.protobuf.Type;
    const initializeCrossRefsMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const analyzeParodiesResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.AnalyzeParodiesResponse') as gax.protobuf.Type;
    const analyzeParodiesMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;
    const exportParodiesResponse = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.ExportParodiesResponse') as gax.protobuf.Type;
    const exportParodiesMetadata = protoFilesRoot.lookup(
      '.animeshon.crossrefs.v1alpha1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      analyzeCrossRefs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        analyzeCrossRefsResponse.decode.bind(analyzeCrossRefsResponse),
        analyzeCrossRefsMetadata.decode.bind(analyzeCrossRefsMetadata)),
      importCrossRefs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importCrossRefsResponse.decode.bind(importCrossRefsResponse),
        importCrossRefsMetadata.decode.bind(importCrossRefsMetadata)),
      exportCrossRefs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportCrossRefsResponse.decode.bind(exportCrossRefsResponse),
        exportCrossRefsMetadata.decode.bind(exportCrossRefsMetadata)),
      initializeCrossRefs: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        initializeCrossRefsResponse.decode.bind(initializeCrossRefsResponse),
        initializeCrossRefsMetadata.decode.bind(initializeCrossRefsMetadata)),
      analyzeParodies: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        analyzeParodiesResponse.decode.bind(analyzeParodiesResponse),
        analyzeParodiesMetadata.decode.bind(analyzeParodiesMetadata)),
      exportParodies: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportParodiesResponse.decode.bind(exportParodiesResponse),
        exportParodiesMetadata.decode.bind(exportParodiesMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.crossrefs.v1alpha1.Referrer', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.referrerStub) {
      return this.referrerStub;
    }

    // Put together the "service stub" for
    // animeshon.crossrefs.v1alpha1.Referrer.
    this.referrerStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.crossrefs.v1alpha1.Referrer') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.crossrefs.v1alpha1.Referrer,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const referrerStubMethods =
        ['getCrossRef', 'listCrossRefs', 'createCrossRef', 'batchCreateCrossRefs', 'updateCrossRef', 'countCrossRefs', 'analyzeCrossRefs', 'importCrossRefs', 'exportCrossRefs', 'initializeCrossRefs', 'analyzeParodies', 'exportParodies', 'getUniverse', 'updateUniverse', 'expandUniverse', 'getWormhole', 'listWormholeCrossRefs'];
    for (const methodName of referrerStubMethods) {
      const callPromise = this.referrerStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.referrerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'crossrefs.animeapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'crossrefs.animeapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * GetCrossRef returns a crossref.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the requested crossref.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CrossRef]{@link animeshon.crossrefs.v1alpha1.CrossRef}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.get_cross_ref.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_GetCrossRef_async
 */
  getCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef,
        protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|undefined, {}|undefined
      ]>;
  getCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  getCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  getCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef,
        protos.animeshon.crossrefs.v1alpha1.IGetCrossRefRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getCrossRef(request, options, callback);
  }
/**
 * CreateCrossRef creates a new crossref.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.crossrefs.v1alpha1.CrossRef} request.crossref
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CrossRef]{@link animeshon.crossrefs.v1alpha1.CrossRef}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.create_cross_ref.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_CreateCrossRef_async
 */
  createCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef,
        protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|undefined, {}|undefined
      ]>;
  createCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  createCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  createCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICrossRef,
          protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef,
        protos.animeshon.crossrefs.v1alpha1.ICreateCrossRefRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createCrossRef(request, options, callback);
  }
/**
 * BatchCreateCrossRefs creates new crossrefs in batch.
 * The limit is of 10 crossreferences and it's blocking.
 * It ensures that the crossreferences are created in the database
 * but not propagated to the other services
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number[]} request.crossref
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BatchCreateCrossRefsResponse]{@link animeshon.crossrefs.v1alpha1.BatchCreateCrossRefsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.batch_create_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_BatchCreateCrossRefs_async
 */
  batchCreateCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|undefined, {}|undefined
      ]>;
  batchCreateCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.IBatchCreateCrossRefsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.batchCreateCrossRefs(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.crossrefs.v1alpha1.CrossRef} request.crossref
 *   The crossref to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UpdateCrossRefResponse]{@link animeshon.crossrefs.v1alpha1.UpdateCrossRefResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.update_cross_ref.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_UpdateCrossRef_async
 */
  updateCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
        protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|undefined, {}|undefined
      ]>;
  updateCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  updateCrossRef(
      request: protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|null|undefined,
          {}|null|undefined>): void;
  updateCrossRef(
      request?: protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse,
        protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'crossref.name': request.crossref!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateCrossRef(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.crossrefs.v1alpha1.CrossRefsFilterRequest} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [CountCrossRefsResponse]{@link animeshon.crossrefs.v1alpha1.CountCrossRefsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.count_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_CountCrossRefs_async
 */
  countCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|undefined, {}|undefined
      ]>;
  countCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  countCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  countCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.countCrossRefs(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the requested universe.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Universe]{@link animeshon.crossrefs.v1alpha1.Universe}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.get_universe.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_GetUniverse_async
 */
  getUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUniverse,
        protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|undefined, {}|undefined
      ]>;
  getUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  getUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  getUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUniverse,
        protos.animeshon.crossrefs.v1alpha1.IGetUniverseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getUniverse(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.crossrefs.v1alpha1.Universe} request.universe
 *   The universe to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Universe]{@link animeshon.crossrefs.v1alpha1.Universe}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.update_universe.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_UpdateUniverse_async
 */
  updateUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUniverse,
        protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|undefined, {}|undefined
      ]>;
  updateUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  updateUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  updateUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IUniverse,
          protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IUniverse,
        protos.animeshon.crossrefs.v1alpha1.IUpdateUniverseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'universe.name': request.universe!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateUniverse(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The universe to expand.
 * @param {number} request.depthLimit
 *   The maximum depth to expand.
 * @param {string} request.filter
 *   The filter to use. Accepted values are CONTENT and CHARACTER.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ExpandUniverseResponse]{@link animeshon.crossrefs.v1alpha1.ExpandUniverseResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.expand_universe.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ExpandUniverse_async
 */
  expandUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
        protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|undefined, {}|undefined
      ]>;
  expandUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  expandUniverse(
      request: protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|null|undefined,
          {}|null|undefined>): void;
  expandUniverse(
      request?: protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
          protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse,
        protos.animeshon.crossrefs.v1alpha1.IExpandUniverseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.expandUniverse(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Wormhole]{@link animeshon.crossrefs.v1alpha1.Wormhole}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.get_wormhole.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_GetWormhole_async
 */
  getWormhole(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IWormhole,
        protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|undefined, {}|undefined
      ]>;
  getWormhole(
      request: protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IWormhole,
          protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|null|undefined,
          {}|null|undefined>): void;
  getWormhole(
      request: protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IWormhole,
          protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|null|undefined,
          {}|null|undefined>): void;
  getWormhole(
      request?: protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IWormhole,
          protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IWormhole,
          protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IWormhole,
        protos.animeshon.crossrefs.v1alpha1.IGetWormholeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getWormhole(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 * @param {boolean} request.withApproved
 *   search wormhole entity in approved edges
 * @param {boolean} request.withPending
 *   search wormhole entity in pending edges
 * @param {boolean} request.withPartial
 *   search wormhole entity in partial edges
 * @param {boolean} request.withRejected
 *   search wormhole entity in rejected edges
 * @param {string[]} request.crossRefsExclusion
 *   list of CrossRefs to exclude
 * @param {string} request.prefix
 *   prefix of the CrossRefs name to search
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListWormholeCrossRefsResponse]{@link animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.list_wormhole_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ListWormholeCrossRefs_async
 */
  listWormholeCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|undefined, {}|undefined
      ]>;
  listWormholeCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  listWormholeCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest,
      callback: Callback<
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|null|undefined,
          {}|null|undefined>): void;
  listWormholeCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
          protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse,
        protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.listWormholeCrossRefs(request, options, callback);
  }

/**
 * Analyzes and proposes new cross-references according to their similarity.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.tollerance
 *   Tollerance of the match in pct
 * @param {number[]} request.opts
 *   Map of all options for the analysis
 * @param {string[]} request.namespaces
 *   Namespaces to analyze
 * @param {string[]} request.targetKinds
 *   Kinds to analyze
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.analyze_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_AnalyzeCrossRefs_async
 */
  analyzeCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  analyzeCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  analyzeCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefRequest,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  analyzeCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.analyzeCrossRefs(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `analyzeCrossRefs()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.analyze_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_AnalyzeCrossRefs_async
 */
  async checkAnalyzeCrossRefsProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.analyzeCrossRefs, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
/**
 * Imports already existing cross-references from third-parties.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number[]} request.opts
 *   Map of all options for the import
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.import_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ImportCrossRefs_async
 */
  importCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IImportCrossRefRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  importCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IImportCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IImportCrossRefRequest,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IImportCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.importCrossRefs(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `importCrossRefs()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.import_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ImportCrossRefs_async
 */
  async checkImportCrossRefsProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.ImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importCrossRefs, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.ImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
/**
 * Exports the cross-references to Cloud Pub/Sub for a full synchronization.
 * This operation is usually called after a new import with a clean database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.crossrefs.v1alpha1.ExportCrossRefRequest.Target} request.target
 * @param {string} request.prefix
 *   Prefix to restrict the crossrefs to export to a specific subset
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.export_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ExportCrossRefs_async
 */
  exportCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IExportCrossRefRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IExportCrossRefRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IExportCrossRefRequest,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IExportCrossRefRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.exportCrossRefs(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `exportCrossRefs()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.export_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ExportCrossRefs_async
 */
  async checkExportCrossRefsProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.ExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportCrossRefs, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.ExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
/**
 * Initialize the cross-references using specific namespaces for each kind.
 * This operation first analyzes the entities meeting the kind and namespace precondition
 * to match new entities with existing ones
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.initialize_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_InitializeCrossRefs_async
 */
  initializeCrossRefs(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  initializeCrossRefs(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  initializeCrossRefs(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  initializeCrossRefs(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.initializeCrossRefs(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `initializeCrossRefs()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.initialize_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_InitializeCrossRefs_async
 */
  async checkInitializeCrossRefsProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.InitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.initializeCrossRefs, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.InitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.analyze_parodies.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_AnalyzeParodies_async
 */
  analyzeParodies(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  analyzeParodies(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  analyzeParodies(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  analyzeParodies(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.analyzeParodies(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `analyzeParodies()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.analyze_parodies.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_AnalyzeParodies_async
 */
  async checkAnalyzeParodiesProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.AnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.analyzeParodies, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.AnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.export_parodies.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ExportParodies_async
 */
  exportParodies(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportParodies(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportParodies(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportParodies(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.exportParodies(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `exportParodies()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.export_parodies.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ExportParodies_async
 */
  async checkExportParodiesProgress(name: string): Promise<LROperation<protos.animeshon.crossrefs.v1alpha1.ExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportParodies, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.animeshon.crossrefs.v1alpha1.ExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.OperationMetadata>;
  }
 /**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested.
 *   The maximum page_size is 100
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {animeshon.crossrefs.v1alpha1.CrossRefsFilterRequest} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [CrossRef]{@link animeshon.crossrefs.v1alpha1.CrossRef}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCrossRefsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef[],
        protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest|null,
        protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse
      ]>;
  listCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse|null|undefined,
          protos.animeshon.crossrefs.v1alpha1.ICrossRef>): void;
  listCrossRefs(
      request: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      callback: PaginationCallback<
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse|null|undefined,
          protos.animeshon.crossrefs.v1alpha1.ICrossRef>): void;
  listCrossRefs(
      request?: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse|null|undefined,
          protos.animeshon.crossrefs.v1alpha1.ICrossRef>,
      callback?: PaginationCallback<
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
          protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse|null|undefined,
          protos.animeshon.crossrefs.v1alpha1.ICrossRef>):
      Promise<[
        protos.animeshon.crossrefs.v1alpha1.ICrossRef[],
        protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest|null,
        protos.animeshon.crossrefs.v1alpha1.IListCrossRefsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listCrossRefs(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested.
 *   The maximum page_size is 100
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {animeshon.crossrefs.v1alpha1.CrossRefsFilterRequest} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [CrossRef]{@link animeshon.crossrefs.v1alpha1.CrossRef} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCrossRefsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listCrossRefsStream(
      request?: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listCrossRefs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCrossRefs.createStream(
      this.innerApiCalls.listCrossRefs as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCrossRefs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested.
 *   The maximum page_size is 100
 *   If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value returned from the previous call.
 * @param {animeshon.crossrefs.v1alpha1.CrossRefsFilterRequest} request.filter
 *   A filter to be applied to results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [CrossRef]{@link animeshon.crossrefs.v1alpha1.CrossRef}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/referrer.list_cross_refs.js</caption>
 * region_tag:crossrefs_v1alpha1_generated_Referrer_ListCrossRefs_async
 */
  listCrossRefsAsync(
      request?: protos.animeshon.crossrefs.v1alpha1.IListCrossRefsRequest,
      options?: CallOptions):
    AsyncIterable<protos.animeshon.crossrefs.v1alpha1.ICrossRef>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listCrossRefs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCrossRefs.asyncIterate(
      this.innerApiCalls['listCrossRefs'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.animeshon.crossrefs.v1alpha1.ICrossRef>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified crossRef resource name string.
   *
   * @param {string} collection
   * @param {string} crossref
   * @returns {string} Resource name string.
   */
  crossRefPath(collection:string,crossref:string) {
    return this.pathTemplates.crossRefPathTemplate.render({
      collection: collection,
      crossref: crossref,
    });
  }

  /**
   * Parse the collection from CrossRef resource.
   *
   * @param {string} crossRefName
   *   A fully-qualified path representing CrossRef resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromCrossRefName(crossRefName: string) {
    return this.pathTemplates.crossRefPathTemplate.match(crossRefName).collection;
  }

  /**
   * Parse the crossref from CrossRef resource.
   *
   * @param {string} crossRefName
   *   A fully-qualified path representing CrossRef resource.
   * @returns {string} A string representing the crossref.
   */
  matchCrossrefFromCrossRefName(crossRefName: string) {
    return this.pathTemplates.crossRefPathTemplate.match(crossRefName).crossref;
  }

  /**
   * Return a fully-qualified universe resource name string.
   *
   * @param {string} universe
   * @returns {string} Resource name string.
   */
  universePath(universe:string) {
    return this.pathTemplates.universePathTemplate.render({
      universe: universe,
    });
  }

  /**
   * Parse the universe from Universe resource.
   *
   * @param {string} universeName
   *   A fully-qualified path representing Universe resource.
   * @returns {string} A string representing the universe.
   */
  matchUniverseFromUniverseName(universeName: string) {
    return this.pathTemplates.universePathTemplate.match(universeName).universe;
  }

  /**
   * Return a fully-qualified wormhole resource name string.
   *
   * @param {string} namespace
   * @param {string} kind
   * @param {string} id
   * @returns {string} Resource name string.
   */
  wormholePath(namespace:string,kind:string,id:string) {
    return this.pathTemplates.wormholePathTemplate.render({
      namespace: namespace,
      kind: kind,
      id: id,
    });
  }

  /**
   * Parse the namespace from Wormhole resource.
   *
   * @param {string} wormholeName
   *   A fully-qualified path representing Wormhole resource.
   * @returns {string} A string representing the namespace.
   */
  matchNamespaceFromWormholeName(wormholeName: string) {
    return this.pathTemplates.wormholePathTemplate.match(wormholeName).namespace;
  }

  /**
   * Parse the kind from Wormhole resource.
   *
   * @param {string} wormholeName
   *   A fully-qualified path representing Wormhole resource.
   * @returns {string} A string representing the kind.
   */
  matchKindFromWormholeName(wormholeName: string) {
    return this.pathTemplates.wormholePathTemplate.match(wormholeName).kind;
  }

  /**
   * Parse the id from Wormhole resource.
   *
   * @param {string} wormholeName
   *   A fully-qualified path representing Wormhole resource.
   * @returns {string} A string representing the id.
   */
  matchIdFromWormholeName(wormholeName: string) {
    return this.pathTemplates.wormholePathTemplate.match(wormholeName).id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.referrerStub!.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
