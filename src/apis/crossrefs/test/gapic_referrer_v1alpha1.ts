// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as referrerModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.ReferrerClient', () => {
    it('has servicePath', () => {
        const servicePath = referrerModule.v1alpha1.ReferrerClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = referrerModule.v1alpha1.ReferrerClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = referrerModule.v1alpha1.ReferrerClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new referrerModule.v1alpha1.ReferrerClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new referrerModule.v1alpha1.ReferrerClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new referrerModule.v1alpha1.ReferrerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.referrerStub, undefined);
        await client.initialize();
        assert(client.referrerStub);
    });

    it('has close method', () => {
        const client = new referrerModule.v1alpha1.ReferrerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new referrerModule.v1alpha1.ReferrerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new referrerModule.v1alpha1.ReferrerClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getCrossRef', () => {
        it('invokes getCrossRef without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetCrossRefRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef());
            client.innerApiCalls.getCrossRef = stubSimpleCall(expectedResponse);
            const [response] = await client.getCrossRef(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCrossRef without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetCrossRefRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef());
            client.innerApiCalls.getCrossRef = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCrossRef(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.ICrossRef|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCrossRef with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetCrossRefRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCrossRef = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCrossRef(request), expectedError);
            assert((client.innerApiCalls.getCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createCrossRef', () => {
        it('invokes createCrossRef without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CreateCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef());
            client.innerApiCalls.createCrossRef = stubSimpleCall(expectedResponse);
            const [response] = await client.createCrossRef(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCrossRef without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CreateCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef());
            client.innerApiCalls.createCrossRef = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCrossRef(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.ICrossRef|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCrossRef with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CreateCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createCrossRef = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCrossRef(request), expectedError);
            assert((client.innerApiCalls.createCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateCrossRef', () => {
        it('invokes updateCrossRef without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest());
            request.crossref = {};
            request.crossref.name = '';
            const expectedHeaderRequestParams = "crossref.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateCrossRefResponse());
            client.innerApiCalls.updateCrossRef = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCrossRef(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCrossRef without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest());
            request.crossref = {};
            request.crossref.name = '';
            const expectedHeaderRequestParams = "crossref.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateCrossRefResponse());
            client.innerApiCalls.updateCrossRef = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCrossRef(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IUpdateCrossRefResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCrossRef with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateCrossRefRequest());
            request.crossref = {};
            request.crossref.name = '';
            const expectedHeaderRequestParams = "crossref.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCrossRef = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCrossRef(request), expectedError);
            assert((client.innerApiCalls.updateCrossRef as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('countCrossRefs', () => {
        it('invokes countCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CountCrossRefsRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CountCrossRefsResponse());
            client.innerApiCalls.countCrossRefs = stubSimpleCall(expectedResponse);
            const [response] = await client.countCrossRefs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.countCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes countCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CountCrossRefsRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CountCrossRefsResponse());
            client.innerApiCalls.countCrossRefs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.countCrossRefs(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.ICountCrossRefsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.countCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes countCrossRefs with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CountCrossRefsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.countCrossRefs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.countCrossRefs(request), expectedError);
            assert((client.innerApiCalls.countCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getUniverse', () => {
        it('invokes getUniverse without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Universe());
            client.innerApiCalls.getUniverse = stubSimpleCall(expectedResponse);
            const [response] = await client.getUniverse(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getUniverse without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Universe());
            client.innerApiCalls.getUniverse = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUniverse(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IUniverse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getUniverse with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getUniverse = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUniverse(request), expectedError);
            assert((client.innerApiCalls.getUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateUniverse', () => {
        it('invokes updateUniverse without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateUniverseRequest());
            request.universe = {};
            request.universe.name = '';
            const expectedHeaderRequestParams = "universe.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Universe());
            client.innerApiCalls.updateUniverse = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUniverse(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateUniverse without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateUniverseRequest());
            request.universe = {};
            request.universe.name = '';
            const expectedHeaderRequestParams = "universe.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Universe());
            client.innerApiCalls.updateUniverse = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUniverse(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IUniverse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateUniverse with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.UpdateUniverseRequest());
            request.universe = {};
            request.universe.name = '';
            const expectedHeaderRequestParams = "universe.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUniverse = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUniverse(request), expectedError);
            assert((client.innerApiCalls.updateUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('expandUniverse', () => {
        it('invokes expandUniverse without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExpandUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExpandUniverseResponse());
            client.innerApiCalls.expandUniverse = stubSimpleCall(expectedResponse);
            const [response] = await client.expandUniverse(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.expandUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes expandUniverse without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExpandUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExpandUniverseResponse());
            client.innerApiCalls.expandUniverse = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.expandUniverse(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IExpandUniverseResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.expandUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes expandUniverse with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExpandUniverseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.expandUniverse = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.expandUniverse(request), expectedError);
            assert((client.innerApiCalls.expandUniverse as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getWormhole', () => {
        it('invokes getWormhole without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetWormholeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Wormhole());
            client.innerApiCalls.getWormhole = stubSimpleCall(expectedResponse);
            const [response] = await client.getWormhole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWormhole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getWormhole without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetWormholeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.Wormhole());
            client.innerApiCalls.getWormhole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getWormhole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IWormhole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWormhole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getWormhole with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.GetWormholeRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getWormhole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getWormhole(request), expectedError);
            assert((client.innerApiCalls.getWormhole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listWormholeCrossRefs', () => {
        it('invokes listWormholeCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsResponse());
            client.innerApiCalls.listWormholeCrossRefs = stubSimpleCall(expectedResponse);
            const [response] = await client.listWormholeCrossRefs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWormholeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWormholeCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsResponse());
            client.innerApiCalls.listWormholeCrossRefs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listWormholeCrossRefs(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.IListWormholeCrossRefsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWormholeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listWormholeCrossRefs with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListWormholeCrossRefsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listWormholeCrossRefs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWormholeCrossRefs(request), expectedError);
            assert((client.innerApiCalls.listWormholeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('analyzeCrossRefs', () => {
        it('invokes analyzeCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.analyzeCrossRefs = stubLongRunningCall(expectedResponse);
            const [operation] = await client.analyzeCrossRefs(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.analyzeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes analyzeCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.analyzeCrossRefs = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.analyzeCrossRefs(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.analyzeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes analyzeCrossRefs with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.analyzeCrossRefs = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.analyzeCrossRefs(request), expectedError);
            assert((client.innerApiCalls.analyzeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes analyzeCrossRefs with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.AnalyzeCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.analyzeCrossRefs = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.analyzeCrossRefs(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.analyzeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkAnalyzeCrossRefsProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAnalyzeCrossRefsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAnalyzeCrossRefsProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAnalyzeCrossRefsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('importCrossRefs', () => {
        it('invokes importCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ImportCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importCrossRefs = stubLongRunningCall(expectedResponse);
            const [operation] = await client.importCrossRefs(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ImportCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importCrossRefs = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.importCrossRefs(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IImportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes importCrossRefs with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ImportCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.importCrossRefs = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.importCrossRefs(request), expectedError);
            assert((client.innerApiCalls.importCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCrossRefs with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ImportCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.importCrossRefs = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.importCrossRefs(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.importCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkImportCrossRefsProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkImportCrossRefsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkImportCrossRefsProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkImportCrossRefsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportCrossRefs', () => {
        it('invokes exportCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExportCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportCrossRefs = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportCrossRefs(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExportCrossRefRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportCrossRefs = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportCrossRefs(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IExportCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes exportCrossRefs with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExportCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.exportCrossRefs = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportCrossRefs(request), expectedError);
            assert((client.innerApiCalls.exportCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportCrossRefs with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ExportCrossRefRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.exportCrossRefs = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportCrossRefs(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.exportCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkExportCrossRefsProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportCrossRefsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportCrossRefsProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportCrossRefsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('initializeCrossRefs', () => {
        it('invokes initializeCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.initializeCrossRefs = stubLongRunningCall(expectedResponse);
            const [operation] = await client.initializeCrossRefs(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.initializeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes initializeCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.initializeCrossRefs = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.initializeCrossRefs(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IInitializeCrossRefsResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.initializeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes initializeCrossRefs with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.initializeCrossRefs = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.initializeCrossRefs(request), expectedError);
            assert((client.innerApiCalls.initializeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes initializeCrossRefs with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.initializeCrossRefs = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.initializeCrossRefs(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.initializeCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkInitializeCrossRefsProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkInitializeCrossRefsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkInitializeCrossRefsProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkInitializeCrossRefsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('analyzeParodies', () => {
        it('invokes analyzeParodies without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.analyzeParodies = stubLongRunningCall(expectedResponse);
            const [operation] = await client.analyzeParodies(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.analyzeParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes analyzeParodies without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.analyzeParodies = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.analyzeParodies(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IAnalyzeParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.analyzeParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes analyzeParodies with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.analyzeParodies = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.analyzeParodies(request), expectedError);
            assert((client.innerApiCalls.analyzeParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes analyzeParodies with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.analyzeParodies = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.analyzeParodies(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.analyzeParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkAnalyzeParodiesProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAnalyzeParodiesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAnalyzeParodiesProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAnalyzeParodiesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportParodies', () => {
        it('invokes exportParodies without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportParodies = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportParodies(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportParodies without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportParodies = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportParodies(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.animeshon.crossrefs.v1alpha1.IExportParodiesResponse, protos.animeshon.crossrefs.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes exportParodies with call error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.exportParodies = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportParodies(request), expectedError);
            assert((client.innerApiCalls.exportParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportParodies with LRO error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.protobuf.Empty());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.exportParodies = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportParodies(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.exportParodies as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkExportParodiesProgress without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportParodiesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportParodiesProgress with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportParodiesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listCrossRefs', () => {
        it('invokes listCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
            ];
            client.innerApiCalls.listCrossRefs = stubSimpleCall(expectedResponse);
            const [response] = await client.listCrossRefs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCrossRefs without error using callback', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
            ];
            client.innerApiCalls.listCrossRefs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCrossRefs(
                    request,
                    (err?: Error|null, result?: protos.animeshon.crossrefs.v1alpha1.ICrossRef[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCrossRefs with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listCrossRefs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCrossRefs(request), expectedError);
            assert((client.innerApiCalls.listCrossRefs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCrossRefsStream without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
            ];
            client.descriptors.page.listCrossRefs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCrossRefsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.crossrefs.v1alpha1.CrossRef[] = [];
                stream.on('data', (response: protos.animeshon.crossrefs.v1alpha1.CrossRef) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCrossRefs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCrossRefs, request));
        });

        it('invokes listCrossRefsStream with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listCrossRefs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCrossRefsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.animeshon.crossrefs.v1alpha1.CrossRef[] = [];
                stream.on('data', (response: protos.animeshon.crossrefs.v1alpha1.CrossRef) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCrossRefs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCrossRefs, request));
        });

        it('uses async iteration with listCrossRefs without error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());const expectedResponse = [
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
              generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.CrossRef()),
            ];
            client.descriptors.page.listCrossRefs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.animeshon.crossrefs.v1alpha1.ICrossRef[] = [];
            const iterable = client.listCrossRefsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCrossRefs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listCrossRefs with error', async () => {
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.crossrefs.v1alpha1.ListCrossRefsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listCrossRefs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCrossRefsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.animeshon.crossrefs.v1alpha1.ICrossRef[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCrossRefs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('crossRef', () => {
            const fakePath = "/rendered/path/crossRef";
            const expectedParameters = {
                collection: "collectionValue",
                crossref: "crossrefValue",
            };
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.crossRefPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.crossRefPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('crossRefPath', () => {
                const result = client.crossRefPath("collectionValue", "crossrefValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.crossRefPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCollectionFromCrossRefName', () => {
                const result = client.matchCollectionFromCrossRefName(fakePath);
                assert.strictEqual(result, "collectionValue");
                assert((client.pathTemplates.crossRefPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCrossrefFromCrossRefName', () => {
                const result = client.matchCrossrefFromCrossRefName(fakePath);
                assert.strictEqual(result, "crossrefValue");
                assert((client.pathTemplates.crossRefPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('universe', () => {
            const fakePath = "/rendered/path/universe";
            const expectedParameters = {
                universe: "universeValue",
            };
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.universePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.universePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('universePath', () => {
                const result = client.universePath("universeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.universePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUniverseFromUniverseName', () => {
                const result = client.matchUniverseFromUniverseName(fakePath);
                assert.strictEqual(result, "universeValue");
                assert((client.pathTemplates.universePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('wormhole', () => {
            const fakePath = "/rendered/path/wormhole";
            const expectedParameters = {
                namespace: "namespaceValue",
                kind: "kindValue",
                id: "idValue",
            };
            const client = new referrerModule.v1alpha1.ReferrerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.wormholePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.wormholePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('wormholePath', () => {
                const result = client.wormholePath("namespaceValue", "kindValue", "idValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.wormholePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNamespaceFromWormholeName', () => {
                const result = client.matchNamespaceFromWormholeName(fakePath);
                assert.strictEqual(result, "namespaceValue");
                assert((client.pathTemplates.wormholePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKindFromWormholeName', () => {
                const result = client.matchKindFromWormholeName(fakePath);
                assert.strictEqual(result, "kindValue");
                assert((client.pathTemplates.wormholePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIdFromWormholeName', () => {
                const result = client.matchIdFromWormholeName(fakePath);
                assert.strictEqual(result, "idValue");
                assert((client.pathTemplates.wormholePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
