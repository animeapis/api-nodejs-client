syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

package animeshon.grbac.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/grbac/v1alpha1;grbac";
option java_package = "com.animeshon.grbac.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::GRBAC::v1Alpha1";

// AccessControl is the internal service used by Animeshon to enforce RBAC rules.
service AccessControl {
  option (google.api.default_host) = "127.0.0.1:9080";

  // Checks whether a member has a specific permission for a specific resource.
  // If not allowed an Unauthorized (403) error will be returned.
  rpc TestIamPolicy(TestIamPolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/iam:testIamPolicy"
      body: "*"
    };
  }

  // Gets the IAM policy that is attached to a generic resource.
  // Note: the full resource name that identifies the resource must be provided.
  rpc GetIamPolicy(google.iam.v1.GetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/iam:getIamPolicy"
    };
  }

  // Sets the IAM policy that is attached to a generic resource.
  // Note: the full resource name that identifies the resource must be provided.
  rpc SetIamPolicy(google.iam.v1.SetIamPolicyRequest) returns (google.iam.v1.Policy) {
    option (google.api.http) = {
      post: "/v1alpha1/iam:setIamPolicy"
      body: "*"
    };
  }

  // GetResource returns a resource.
  rpc GetResource(GetResourceRequest) returns (Resource) {
    option (google.api.http) = {
      get: "/v1alpha1/resources/{name=**}"
    };
  }

  // CreateResource creates a new resource.
  rpc CreateResource(CreateResourceRequest) returns (Resource) {
    option (google.api.http) = {
      post: "/v1alpha1/resources/{resource.name=**}"
      body: "*"
    };
  }

  // TransferResource transfers a resource to a new parent.
  rpc TransferResource(TransferResourceRequest) returns (Resource) {
    option (google.api.http) = {
      post: "/v1alpha1/resources/{name=**}:transfer"
    };
  }

  // DeleteResource deletes a resource.
  rpc DeleteResource(DeleteResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/resources/{name=**}"
    };
  }

  // CreateSubject creates a new subject.
  rpc CreateSubject(CreateSubjectRequest) returns (Subject) {
    option (google.api.http) = {
      post: "/v1alpha1/{subject.name=users/*}"
      body: "*"
      additional_bindings {
        patch: "/v1alpha1/{subject.name=serviceAccounts/*}"
        body: "*"
      }
    };
  }

  // DeleteSubject deletes a subject.
  rpc DeleteSubject(DeleteSubjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=users/*}"
      additional_bindings {
        delete: "/v1alpha1/{name=serviceAccounts/*}"
      }
    };
  }

  // GetGroup returns a group.
  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=groups/*}"
    };
  }

  // CreateGroup creates a new group.
  rpc CreateGroup(CreateGroupRequest) returns (Group) {
    option (google.api.http) = {
      post: "/v1alpha1/{group.name=groups/*}"
      body: "*"
    };
  }

  // UpdateGroup updates a group with a field mask.
  rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
    option (google.api.http) = {
      patch: "/v1alpha1/{group.name=groups/*}"
      body: "*"
    };
  }

  // AddGroupMember adds a member to a group.
  rpc AddGroupMember(AddGroupMemberRequest) returns (Group) {
    option (google.api.http) = {
      patch: "/v1alpha1/{group=groups/*}:addMember"
      body: "*"
    };
  }

  // RemoveGroupMember removes a member from a group.
  rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (Group) {
    option (google.api.http) = {
      patch: "/v1alpha1/{group=groups/*}:removeMember"
      body: "*"
    };
  }

  // DeleteGroup deletes a group.
  rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=groups/*}"
    };
  }

  // CreatePermission creates a new permission.
  rpc CreatePermission(CreatePermissionRequest) returns (Permission) {
    option (google.api.http) = {
      post: "/v1alpha1/{permission.name=permissions/*}"
      body: "*"
    };
  }

  // DeletePermission deletes a permission.
  rpc DeletePermission(DeletePermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=permissions/*}"
    };
  }

  // GetRole returns a role.
  rpc GetRole(GetRoleRequest) returns (Role) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=roles/*}"
    };
  }

  // CreateRole creates a new role.
  rpc CreateRole(CreateRoleRequest) returns (Role) {
    option (google.api.http) = {
      post: "/v1alpha1/{role.name=roles/*}"
      body: "*"
    };
  }

  // UpdateRole updates a role with a field mask.
  rpc UpdateRole(UpdateRoleRequest) returns (Role) {
    option (google.api.http) = {
      patch: "/v1alpha1/{role.name=roles/*}"
      body: "*"
    };
  }

  // DeleteRole deletes a role.
  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=roles/*}"
    };
  }
}

// Information about the member, resource, and permission to check.
message AccessTuple {
  // The member, or principal, whose access you want to check.
  string principal = 1 [(google.api.field_behavior) = REQUIRED];

  // The full resource name that identifies the resource.
  string full_resource_name = 2 [(google.api.field_behavior) = REQUIRED];

  // The IAM permission to check for the specified member and resource.
  string permission = 3 [(google.api.field_behavior) = REQUIRED];
}

message Resource {
  // The full resource name that identifies the resource.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The full resource name that identifies the parent resource.
  string parent = 2 [(google.api.field_behavior) = REQUIRED];

  // An etag for concurrency control, ignored during creation.
  bytes etag = 3;
}

message Subject {
  // The resource name of the subject.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message Group {
  // The resource name of the group.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of members of the group. Groups might include other groups.
  repeated string members = 2;

  // An etag for concurrency control, ignored during creation.
  bytes etag = 3;
}

message Permission {
  // The resource name of the permission.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message Role {
  // The resource name of the role.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of permissions granted by the role.
  repeated string permissions = 2 [(google.api.field_behavior) = REQUIRED];

  // An etag for concurrency control, ignored during creation.
  bytes etag = 3;
}

message TestIamPolicyRequest {
  // The information to use for checking whether a member has a permission for a
  // resource.
  AccessTuple access_tuple = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetResourceRequest {
  // The full resource name of the resource to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];
}

message CreateResourceRequest {
  // The resource to create.
  Resource resource = 1 [(google.api.field_behavior) = REQUIRED];
}

message TransferResourceRequest {
  // The full resource name that identifies the resource.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];

  // The full resource name that identifies the new parent resource.
  string target_parent = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];

  // The map of substitutions to apply to the full resource name and all of its
  // children.
  //
  // As an example, it might be required to change the parent of a resource from
  // "users/123" to "users/678", the substitutions would then look like this:
  //
  // substitutions = {"users/123": "users/456789"}
  //
  // and the expected result would then be the following:
  //
  // from : //abc.animeapis.com/users/123/resources/210
  // to   : //abc.animeapis.com/users/456789/resources/210
  // 
  // The same applies if we need to transfer a resource between two parents of
  // different type:
  //
  // substitutions = {"users/123": "organizations/678/teams/987"}
  //
  // and the expected result would then be the following:
  //
  // from : //abc.animeapis.com/users/123/resources/210
  // to   : //abc.animeapis.com/organizations/678/teams/987/resources/210
  //
  // It is possible to apply multiple substitutions simultaneously.
  map<string,string> substitutions = 3;
}

message DeleteResourceRequest {
  // The full resource name that identifies the resource.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];
}

message CreateSubjectRequest {
  // The subject to create.
  Subject subject = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteSubjectRequest {
  // The subject to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Subject"
    }
  ];
}

message GetGroupRequest {
  // The name of the group to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Group"
    }
  ];
}

message CreateGroupRequest {
  // The group to create.
  Group group = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateGroupRequest {
  // The group to update.
  Group group = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message AddGroupMemberRequest {
  // The name of the group to add a member to.
  string group = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Group"
    }
  ];

  // The member to be added.
  string member = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];
}

message RemoveGroupMemberRequest {
  // The name of the group to remove an member from.
  string group = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Group"
    }
  ];

  // The member to be removed.
  string member = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "*" }
  ];
}

message DeleteGroupRequest {
  // The resource name of the group to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Group"
    }
  ];
}

message CreatePermissionRequest {
  // The permission to create.
  Permission permission = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeletePermissionRequest {
  // The resource name of the permission to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Permission"
    }
  ];
}

message GetRoleRequest {
  // The name of the role to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Role"
    }
  ];
}

message CreateRoleRequest {
  // The role to create.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateRoleRequest {
  // The role to update.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteRoleRequest {
  // The resource name of the role to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "grbac.animeapis.com/Role"
    }
  ];
}
