// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/access_control_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './access_control_client_config.json';

const version = require('../../../package.json').version;

/**
 *  AccessControl is the internal service used by Animeshon to enforce RBAC rules.
 * @class
 * @memberof v1alpha1
 */
export class AccessControlClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  accessControlStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AccessControlClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AccessControlClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'animeshon.grbac.v1alpha1.AccessControl', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.accessControlStub) {
      return this.accessControlStub;
    }

    // Put together the "service stub" for
    // animeshon.grbac.v1alpha1.AccessControl.
    this.accessControlStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('animeshon.grbac.v1alpha1.AccessControl') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).animeshon.grbac.v1alpha1.AccessControl,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const accessControlStubMethods =
        ['testIamPolicy', 'getIamPolicy', 'setIamPolicy', 'getResource', 'createResource', 'transferResource', 'deleteResource', 'createSubject', 'deleteSubject', 'getGroup', 'createGroup', 'updateGroup', 'addGroupMember', 'removeGroupMember', 'deleteGroup', 'createPermission', 'deletePermission', 'getRole', 'createRole', 'updateRole', 'deleteRole'];
    for (const methodName of accessControlStubMethods) {
      const callPromise = this.accessControlStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.accessControlStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return '127.0.0.1';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return '127.0.0.1';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 9080;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Checks whether a member has a specific permission for a specific resource.
 * If not allowed an Unauthorized (403) error will be returned.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.AccessTuple} request.accessTuple
 *   The information to use for checking whether a member has a permission for a
 *   resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.test_iam_policy.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_TestIamPolicy_async
 */
  testIamPolicy(
      request?: protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|undefined, {}|undefined
      ]>;
  testIamPolicy(
      request: protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPolicy(
      request: protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPolicy(
      request?: protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.ITestIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.testIamPolicy(request, options, callback);
  }
/**
 * Gets the IAM policy that is attached to a generic resource.
 * Note: the full resource name that identifies the resource must be provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.GetPolicyOptions} request.options
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.get_iam_policy.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_GetIamPolicy_async
 */
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
/**
 * Sets the IAM policy that is attached to a generic resource.
 * Note: the full resource name that identifies the resource must be provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being specified.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.Policy} request.policy
 *   REQUIRED: The complete policy to be applied to the `resource`. The size of
 *   the policy is limited to a few 10s of KB. An empty policy is a
 *   valid policy but certain Cloud Platform services (such as Projects)
 *   might reject them.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *   the fields in the mask will be modified. If no mask is provided, the
 *   following default mask is used:
 *
 *   `paths: "bindings, etag"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.set_iam_policy.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_SetIamPolicy_async
 */
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
/**
 * GetResource returns a resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The full resource name of the resource to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Resource]{@link animeshon.grbac.v1alpha1.Resource}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.get_resource.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_GetResource_async
 */
  getResource(
      request?: protos.animeshon.grbac.v1alpha1.IGetResourceRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.IGetResourceRequest|undefined, {}|undefined
      ]>;
  getResource(
      request: protos.animeshon.grbac.v1alpha1.IGetResourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.IGetResourceRequest|null|undefined,
          {}|null|undefined>): void;
  getResource(
      request: protos.animeshon.grbac.v1alpha1.IGetResourceRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.IGetResourceRequest|null|undefined,
          {}|null|undefined>): void;
  getResource(
      request?: protos.animeshon.grbac.v1alpha1.IGetResourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.IGetResourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.IGetResourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.IGetResourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getResource(request, options, callback);
  }
/**
 * CreateResource creates a new resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Resource} request.resource
 *   The resource to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Resource]{@link animeshon.grbac.v1alpha1.Resource}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.create_resource.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_CreateResource_async
 */
  createResource(
      request?: protos.animeshon.grbac.v1alpha1.ICreateResourceRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|undefined, {}|undefined
      ]>;
  createResource(
      request: protos.animeshon.grbac.v1alpha1.ICreateResourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|null|undefined,
          {}|null|undefined>): void;
  createResource(
      request: protos.animeshon.grbac.v1alpha1.ICreateResourceRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|null|undefined,
          {}|null|undefined>): void;
  createResource(
      request?: protos.animeshon.grbac.v1alpha1.ICreateResourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.ICreateResourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'resource.name': request.resource!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createResource(request, options, callback);
  }
/**
 * TransferResource transfers a resource to a new parent.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The full resource name that identifies the resource.
 * @param {string} request.targetParent
 *   The full resource name that identifies the new parent resource.
 * @param {number[]} request.substitutions
 *   The map of substitutions to apply to the full resource name and all of its
 *   children.
 *
 *   As an example, it might be required to change the parent of a resource from
 *   "users/123" to "users/678", the substitutions would then look like this:
 *
 *   substitutions = {"users/123": "users/456789"}
 *
 *   and the expected result would then be the following:
 *
 *   from : //abc.animeapis.com/users/123/resources/210
 *   to   : //abc.animeapis.com/users/456789/resources/210
 *
 *   The same applies if we need to transfer a resource between two parents of
 *   different type:
 *
 *   substitutions = {"users/123": "organizations/678/teams/987"}
 *
 *   and the expected result would then be the following:
 *
 *   from : //abc.animeapis.com/users/123/resources/210
 *   to   : //abc.animeapis.com/organizations/678/teams/987/resources/210
 *
 *   It is possible to apply multiple substitutions simultaneously.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Resource]{@link animeshon.grbac.v1alpha1.Resource}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.transfer_resource.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_TransferResource_async
 */
  transferResource(
      request?: protos.animeshon.grbac.v1alpha1.ITransferResourceRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|undefined, {}|undefined
      ]>;
  transferResource(
      request: protos.animeshon.grbac.v1alpha1.ITransferResourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|null|undefined,
          {}|null|undefined>): void;
  transferResource(
      request: protos.animeshon.grbac.v1alpha1.ITransferResourceRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|null|undefined,
          {}|null|undefined>): void;
  transferResource(
      request?: protos.animeshon.grbac.v1alpha1.ITransferResourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IResource,
          protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IResource,
        protos.animeshon.grbac.v1alpha1.ITransferResourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.transferResource(request, options, callback);
  }
/**
 * DeleteResource deletes a resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The full resource name that identifies the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.delete_resource.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_DeleteResource_async
 */
  deleteResource(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|undefined, {}|undefined
      ]>;
  deleteResource(
      request: protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|null|undefined,
          {}|null|undefined>): void;
  deleteResource(
      request: protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|null|undefined,
          {}|null|undefined>): void;
  deleteResource(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteResourceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteResource(request, options, callback);
  }
/**
 * CreateSubject creates a new subject.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Subject} request.subject
 *   The subject to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Subject]{@link animeshon.grbac.v1alpha1.Subject}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.create_subject.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_CreateSubject_async
 */
  createSubject(
      request?: protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.ISubject,
        protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|undefined, {}|undefined
      ]>;
  createSubject(
      request: protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.ISubject,
          protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|null|undefined,
          {}|null|undefined>): void;
  createSubject(
      request: protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.ISubject,
          protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|null|undefined,
          {}|null|undefined>): void;
  createSubject(
      request?: protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.ISubject,
          protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.ISubject,
          protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.ISubject,
        protos.animeshon.grbac.v1alpha1.ICreateSubjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'subject.name': request.subject!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createSubject(request, options, callback);
  }
/**
 * DeleteSubject deletes a subject.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The subject to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.delete_subject.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_DeleteSubject_async
 */
  deleteSubject(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|undefined, {}|undefined
      ]>;
  deleteSubject(
      request: protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSubject(
      request: protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSubject(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteSubjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSubject(request, options, callback);
  }
/**
 * GetGroup returns a group.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the group to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Group]{@link animeshon.grbac.v1alpha1.Group}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.get_group.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_GetGroup_async
 */
  getGroup(
      request?: protos.animeshon.grbac.v1alpha1.IGetGroupRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IGetGroupRequest|undefined, {}|undefined
      ]>;
  getGroup(
      request: protos.animeshon.grbac.v1alpha1.IGetGroupRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IGetGroupRequest|null|undefined,
          {}|null|undefined>): void;
  getGroup(
      request: protos.animeshon.grbac.v1alpha1.IGetGroupRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IGetGroupRequest|null|undefined,
          {}|null|undefined>): void;
  getGroup(
      request?: protos.animeshon.grbac.v1alpha1.IGetGroupRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IGetGroupRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IGetGroupRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IGetGroupRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getGroup(request, options, callback);
  }
/**
 * CreateGroup creates a new group.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Group} request.group
 *   The group to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Group]{@link animeshon.grbac.v1alpha1.Group}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.create_group.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_CreateGroup_async
 */
  createGroup(
      request?: protos.animeshon.grbac.v1alpha1.ICreateGroupRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|undefined, {}|undefined
      ]>;
  createGroup(
      request: protos.animeshon.grbac.v1alpha1.ICreateGroupRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|null|undefined,
          {}|null|undefined>): void;
  createGroup(
      request: protos.animeshon.grbac.v1alpha1.ICreateGroupRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|null|undefined,
          {}|null|undefined>): void;
  createGroup(
      request?: protos.animeshon.grbac.v1alpha1.ICreateGroupRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.ICreateGroupRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'group.name': request.group!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createGroup(request, options, callback);
  }
/**
 * UpdateGroup updates a group with a field mask.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Group} request.group
 *   The group to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Group]{@link animeshon.grbac.v1alpha1.Group}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.update_group.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_UpdateGroup_async
 */
  updateGroup(
      request?: protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|undefined, {}|undefined
      ]>;
  updateGroup(
      request: protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|null|undefined,
          {}|null|undefined>): void;
  updateGroup(
      request: protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|null|undefined,
          {}|null|undefined>): void;
  updateGroup(
      request?: protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IUpdateGroupRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'group.name': request.group!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateGroup(request, options, callback);
  }
/**
 * AddGroupMember adds a member to a group.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.group
 *   The name of the group to add a member to.
 * @param {string} request.member
 *   The member to be added.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Group]{@link animeshon.grbac.v1alpha1.Group}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.add_group_member.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_AddGroupMember_async
 */
  addGroupMember(
      request?: protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|undefined, {}|undefined
      ]>;
  addGroupMember(
      request: protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|null|undefined,
          {}|null|undefined>): void;
  addGroupMember(
      request: protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|null|undefined,
          {}|null|undefined>): void;
  addGroupMember(
      request?: protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IAddGroupMemberRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'group': request.group || '',
    });
    this.initialize();
    return this.innerApiCalls.addGroupMember(request, options, callback);
  }
/**
 * RemoveGroupMember removes a member from a group.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.group
 *   The name of the group to remove an member from.
 * @param {string} request.member
 *   The member to be removed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Group]{@link animeshon.grbac.v1alpha1.Group}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.remove_group_member.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_RemoveGroupMember_async
 */
  removeGroupMember(
      request?: protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|undefined, {}|undefined
      ]>;
  removeGroupMember(
      request: protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|null|undefined,
          {}|null|undefined>): void;
  removeGroupMember(
      request: protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|null|undefined,
          {}|null|undefined>): void;
  removeGroupMember(
      request?: protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IGroup,
          protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IGroup,
        protos.animeshon.grbac.v1alpha1.IRemoveGroupMemberRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'group': request.group || '',
    });
    this.initialize();
    return this.innerApiCalls.removeGroupMember(request, options, callback);
  }
/**
 * DeleteGroup deletes a group.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the group to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.delete_group.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_DeleteGroup_async
 */
  deleteGroup(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|undefined, {}|undefined
      ]>;
  deleteGroup(
      request: protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGroup(
      request: protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGroup(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteGroupRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteGroup(request, options, callback);
  }
/**
 * CreatePermission creates a new permission.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Permission} request.permission
 *   The permission to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Permission]{@link animeshon.grbac.v1alpha1.Permission}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.create_permission.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_CreatePermission_async
 */
  createPermission(
      request?: protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IPermission,
        protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|undefined, {}|undefined
      ]>;
  createPermission(
      request: protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IPermission,
          protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  createPermission(
      request: protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IPermission,
          protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  createPermission(
      request?: protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IPermission,
          protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IPermission,
          protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IPermission,
        protos.animeshon.grbac.v1alpha1.ICreatePermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'permission.name': request.permission!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createPermission(request, options, callback);
  }
/**
 * DeletePermission deletes a permission.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the permission to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.delete_permission.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_DeletePermission_async
 */
  deletePermission(
      request?: protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|undefined, {}|undefined
      ]>;
  deletePermission(
      request: protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  deletePermission(
      request: protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>): void;
  deletePermission(
      request?: protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeletePermissionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deletePermission(request, options, callback);
  }
/**
 * GetRole returns a role.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the role to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.grbac.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.get_role.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_GetRole_async
 */
  getRole(
      request?: protos.animeshon.grbac.v1alpha1.IGetRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.IGetRoleRequest|undefined, {}|undefined
      ]>;
  getRole(
      request: protos.animeshon.grbac.v1alpha1.IGetRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
  getRole(
      request: protos.animeshon.grbac.v1alpha1.IGetRoleRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
  getRole(
      request?: protos.animeshon.grbac.v1alpha1.IGetRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IGetRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.IGetRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getRole(request, options, callback);
  }
/**
 * CreateRole creates a new role.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Role} request.role
 *   The role to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.grbac.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.create_role.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_CreateRole_async
 */
  createRole(
      request?: protos.animeshon.grbac.v1alpha1.ICreateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|undefined, {}|undefined
      ]>;
  createRole(
      request: protos.animeshon.grbac.v1alpha1.ICreateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  createRole(
      request: protos.animeshon.grbac.v1alpha1.ICreateRoleRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  createRole(
      request?: protos.animeshon.grbac.v1alpha1.ICreateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.ICreateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'role.name': request.role!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createRole(request, options, callback);
  }
/**
 * UpdateRole updates a role with a field mask.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {animeshon.grbac.v1alpha1.Role} request.role
 *   The role to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine which fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link animeshon.grbac.v1alpha1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.update_role.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_UpdateRole_async
 */
  updateRole(
      request?: protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|undefined, {}|undefined
      ]>;
  updateRole(
      request: protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  updateRole(
      request: protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest,
      callback: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  updateRole(
      request?: protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.animeshon.grbac.v1alpha1.IRole,
          protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.animeshon.grbac.v1alpha1.IRole,
        protos.animeshon.grbac.v1alpha1.IUpdateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'role.name': request.role!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateRole(request, options, callback);
  }
/**
 * DeleteRole deletes a role.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the role to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1alpha1/access_control.delete_role.js</caption>
 * region_tag:127_v1alpha1_generated_AccessControl_DeleteRole_async
 */
  deleteRole(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|undefined, {}|undefined
      ]>;
  deleteRole(
      request: protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRole(
      request: protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRole(
      request?: protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.animeshon.grbac.v1alpha1.IDeleteRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteRole(request, options, callback);
  }


  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.accessControlStub && !this._terminated) {
      return this.accessControlStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
