// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as accesscontrolModule from '../src';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1alpha1.AccessControlClient', () => {
    it('has servicePath', () => {
        const servicePath = accesscontrolModule.v1alpha1.AccessControlClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = accesscontrolModule.v1alpha1.AccessControlClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = accesscontrolModule.v1alpha1.AccessControlClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new accesscontrolModule.v1alpha1.AccessControlClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new accesscontrolModule.v1alpha1.AccessControlClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.accessControlStub, undefined);
        await client.initialize();
        assert(client.accessControlStub);
    });

    it('has close method', () => {
        const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('testIamPolicy', () => {
        it('invokes testIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.testIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes testIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.testIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.testIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes testIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPolicy(request), expectedError);
            assert((client.innerApiCalls.testIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
            assert((client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
            assert((client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getResource', () => {
        it('invokes getResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.getResource = stubSimpleCall(expectedResponse);
            const [response] = await client.getResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.getResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getResource(request), expectedError);
            assert((client.innerApiCalls.getResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createResource', () => {
        it('invokes createResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateResourceRequest());
            request.resource = {};
            request.resource.name = '';
            const expectedHeaderRequestParams = "resource.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.createResource = stubSimpleCall(expectedResponse);
            const [response] = await client.createResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateResourceRequest());
            request.resource = {};
            request.resource.name = '';
            const expectedHeaderRequestParams = "resource.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.createResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateResourceRequest());
            request.resource = {};
            request.resource.name = '';
            const expectedHeaderRequestParams = "resource.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createResource(request), expectedError);
            assert((client.innerApiCalls.createResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('transferResource', () => {
        it('invokes transferResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TransferResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.transferResource = stubSimpleCall(expectedResponse);
            const [response] = await client.transferResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes transferResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TransferResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Resource());
            client.innerApiCalls.transferResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.transferResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes transferResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.TransferResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.transferResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.transferResource(request), expectedError);
            assert((client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteResource', () => {
        it('invokes deleteResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteResource = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteResource(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteResource(request), expectedError);
            assert((client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createSubject', () => {
        it('invokes createSubject without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest());
            request.subject = {};
            request.subject.name = '';
            const expectedHeaderRequestParams = "subject.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Subject());
            client.innerApiCalls.createSubject = stubSimpleCall(expectedResponse);
            const [response] = await client.createSubject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createSubject without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest());
            request.subject = {};
            request.subject.name = '';
            const expectedHeaderRequestParams = "subject.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Subject());
            client.innerApiCalls.createSubject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSubject(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.ISubject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createSubject with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest());
            request.subject = {};
            request.subject.name = '';
            const expectedHeaderRequestParams = "subject.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createSubject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSubject(request), expectedError);
            assert((client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteSubject', () => {
        it('invokes deleteSubject without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSubject = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSubject(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSubject without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSubject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSubject(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteSubject with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSubject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSubject(request), expectedError);
            assert((client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getGroup', () => {
        it('invokes getGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.getGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.getGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.getGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGroup(request), expectedError);
            assert((client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createGroup', () => {
        it('invokes createGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.createGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.createGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.createGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createGroup(request), expectedError);
            assert((client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateGroup', () => {
        it('invokes updateGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.updateGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.updateGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.updateGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest());
            request.group = {};
            request.group.name = '';
            const expectedHeaderRequestParams = "group.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateGroup(request), expectedError);
            assert((client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('addGroupMember', () => {
        it('invokes addGroupMember without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.addGroupMember = stubSimpleCall(expectedResponse);
            const [response] = await client.addGroupMember(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addGroupMember without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.addGroupMember = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addGroupMember(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes addGroupMember with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addGroupMember = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.addGroupMember(request), expectedError);
            assert((client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('removeGroupMember', () => {
        it('invokes removeGroupMember without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.removeGroupMember = stubSimpleCall(expectedResponse);
            const [response] = await client.removeGroupMember(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes removeGroupMember without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Group());
            client.innerApiCalls.removeGroupMember = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeGroupMember(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes removeGroupMember with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest());
            request.group = '';
            const expectedHeaderRequestParams = "group=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.removeGroupMember = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.removeGroupMember(request), expectedError);
            assert((client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteGroup', () => {
        it('invokes deleteGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteGroup(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteGroup(request), expectedError);
            assert((client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createPermission', () => {
        it('invokes createPermission without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest());
            request.permission = {};
            request.permission.name = '';
            const expectedHeaderRequestParams = "permission.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Permission());
            client.innerApiCalls.createPermission = stubSimpleCall(expectedResponse);
            const [response] = await client.createPermission(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPermission without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest());
            request.permission = {};
            request.permission.name = '';
            const expectedHeaderRequestParams = "permission.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Permission());
            client.innerApiCalls.createPermission = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPermission(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IPermission|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createPermission with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest());
            request.permission = {};
            request.permission.name = '';
            const expectedHeaderRequestParams = "permission.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createPermission = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPermission(request), expectedError);
            assert((client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deletePermission', () => {
        it('invokes deletePermission without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePermission = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePermission(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePermission without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePermission = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePermission(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deletePermission with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePermission = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePermission(request), expectedError);
            assert((client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRole', () => {
        it('invokes getRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.getRole = stubSimpleCall(expectedResponse);
            const [response] = await client.getRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.getRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.GetRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRole(request), expectedError);
            assert((client.innerApiCalls.getRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createRole', () => {
        it('invokes createRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.createRole = stubSimpleCall(expectedResponse);
            const [response] = await client.createRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.createRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.CreateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRole(request), expectedError);
            assert((client.innerApiCalls.createRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateRole', () => {
        it('invokes updateRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.updateRole = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.Role());
            client.innerApiCalls.updateRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest());
            request.role = {};
            request.role.name = '';
            const expectedHeaderRequestParams = "role.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRole(request), expectedError);
            assert((client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteRole', () => {
        it('invokes deleteRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRole = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRole(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRole(request), expectedError);
            assert((client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
