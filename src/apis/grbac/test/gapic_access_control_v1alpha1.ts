// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as accesscontrolModule from '../src';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1alpha1.AccessControlClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = accesscontrolModule.v1alpha1.AccessControlClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = accesscontrolModule.v1alpha1.AccessControlClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = accesscontrolModule.v1alpha1.AccessControlClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.accessControlStub, undefined);
            await client.initialize();
            assert(client.accessControlStub);
        });

        it('has close method for the initialized client', done => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.accessControlStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.accessControlStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('testIamPolicy', () => {
        it('invokes testIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.testIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes testIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.testIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes testIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPolicy(request), expectedError);
        });

        it('invokes testIamPolicy with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TestIamPolicyRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.testIamPolicy(request), expectedError);
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
        });

        it('invokes getIamPolicy with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getIamPolicy(request), expectedError);
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
        });

        it('invokes setIamPolicy with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.setIamPolicy(request), expectedError);
        });
    });

    describe('getResource', () => {
        it('invokes getResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.getResource = stubSimpleCall(expectedResponse);
            const [response] = await client.getResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.getResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getResource with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getResource(request), expectedError);
        });
    });

    describe('createResource', () => {
        it('invokes createResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateResourceRequest()
            );
            request.resource ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateResourceRequest', ['resource', 'name']);
            request.resource.name = defaultValue1;
            const expectedHeaderRequestParams = `resource.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.createResource = stubSimpleCall(expectedResponse);
            const [response] = await client.createResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateResourceRequest()
            );
            request.resource ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateResourceRequest', ['resource', 'name']);
            request.resource.name = defaultValue1;
            const expectedHeaderRequestParams = `resource.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.createResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateResourceRequest()
            );
            request.resource ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateResourceRequest', ['resource', 'name']);
            request.resource.name = defaultValue1;
            const expectedHeaderRequestParams = `resource.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createResource with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateResourceRequest()
            );
            request.resource ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateResourceRequest', ['resource', 'name']);
            request.resource.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createResource(request), expectedError);
        });
    });

    describe('transferResource', () => {
        it('invokes transferResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TransferResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.TransferResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.transferResource = stubSimpleCall(expectedResponse);
            const [response] = await client.transferResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes transferResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TransferResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.TransferResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Resource()
            );
            client.innerApiCalls.transferResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.transferResource(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IResource|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes transferResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TransferResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.TransferResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.transferResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.transferResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.transferResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes transferResource with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.TransferResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.TransferResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.transferResource(request), expectedError);
        });
    });

    describe('deleteResource', () => {
        it('invokes deleteResource without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteResource = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResource without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteResource(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResource with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteResource with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteResourceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteResourceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteResource(request), expectedError);
        });
    });

    describe('createSubject', () => {
        it('invokes createSubject without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest()
            );
            request.subject ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateSubjectRequest', ['subject', 'name']);
            request.subject.name = defaultValue1;
            const expectedHeaderRequestParams = `subject.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Subject()
            );
            client.innerApiCalls.createSubject = stubSimpleCall(expectedResponse);
            const [response] = await client.createSubject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSubject without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest()
            );
            request.subject ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateSubjectRequest', ['subject', 'name']);
            request.subject.name = defaultValue1;
            const expectedHeaderRequestParams = `subject.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Subject()
            );
            client.innerApiCalls.createSubject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSubject(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.ISubject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSubject with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest()
            );
            request.subject ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateSubjectRequest', ['subject', 'name']);
            request.subject.name = defaultValue1;
            const expectedHeaderRequestParams = `subject.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSubject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSubject(request), expectedError);
            const actualRequest = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createSubject with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateSubjectRequest()
            );
            request.subject ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateSubjectRequest', ['subject', 'name']);
            request.subject.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createSubject(request), expectedError);
        });
    });

    describe('deleteSubject', () => {
        it('invokes deleteSubject without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteSubjectRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSubject = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSubject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSubject without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteSubjectRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteSubject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSubject(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSubject with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteSubjectRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSubject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSubject(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteSubject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteSubject with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteSubjectRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteSubjectRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteSubject(request), expectedError);
        });
    });

    describe('getGroup', () => {
        it('invokes getGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.getGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.getGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.getGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getGroup with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getGroup(request), expectedError);
        });
    });

    describe('createGroup', () => {
        it('invokes createGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.createGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.createGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.createGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createGroup with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createGroup(request), expectedError);
        });
    });

    describe('updateGroup', () => {
        it('invokes updateGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.updateGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.updateGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.updateGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateGroup(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateGroup with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateGroupRequest()
            );
            request.group ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateGroupRequest', ['group', 'name']);
            request.group.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateGroup(request), expectedError);
        });
    });

    describe('addGroupMember', () => {
        it('invokes addGroupMember without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.AddGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.addGroupMember = stubSimpleCall(expectedResponse);
            const [response] = await client.addGroupMember(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addGroupMember without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.AddGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.addGroupMember = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addGroupMember(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addGroupMember with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.AddGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.addGroupMember = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.addGroupMember(request), expectedError);
            const actualRequest = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.addGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes addGroupMember with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.AddGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.AddGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.addGroupMember(request), expectedError);
        });
    });

    describe('removeGroupMember', () => {
        it('invokes removeGroupMember without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.removeGroupMember = stubSimpleCall(expectedResponse);
            const [response] = await client.removeGroupMember(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeGroupMember without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Group()
            );
            client.innerApiCalls.removeGroupMember = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeGroupMember(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IGroup|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeGroupMember with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedHeaderRequestParams = `group=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.removeGroupMember = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.removeGroupMember(request), expectedError);
            const actualRequest = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeGroupMember as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeGroupMember with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.RemoveGroupMemberRequest', ['group']);
            request.group = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.removeGroupMember(request), expectedError);
        });
    });

    describe('deleteGroup', () => {
        it('invokes deleteGroup without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteGroup = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteGroup(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteGroup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteGroup(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGroup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteGroup(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteGroup as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteGroup with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteGroupRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteGroupRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteGroup(request), expectedError);
        });
    });

    describe('createPermission', () => {
        it('invokes createPermission without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest()
            );
            request.permission ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreatePermissionRequest', ['permission', 'name']);
            request.permission.name = defaultValue1;
            const expectedHeaderRequestParams = `permission.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Permission()
            );
            client.innerApiCalls.createPermission = stubSimpleCall(expectedResponse);
            const [response] = await client.createPermission(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPermission without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest()
            );
            request.permission ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreatePermissionRequest', ['permission', 'name']);
            request.permission.name = defaultValue1;
            const expectedHeaderRequestParams = `permission.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Permission()
            );
            client.innerApiCalls.createPermission = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPermission(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IPermission|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPermission with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest()
            );
            request.permission ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreatePermissionRequest', ['permission', 'name']);
            request.permission.name = defaultValue1;
            const expectedHeaderRequestParams = `permission.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createPermission = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPermission(request), expectedError);
            const actualRequest = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createPermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createPermission with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreatePermissionRequest()
            );
            request.permission ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreatePermissionRequest', ['permission', 'name']);
            request.permission.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createPermission(request), expectedError);
        });
    });

    describe('deletePermission', () => {
        it('invokes deletePermission without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeletePermissionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deletePermission = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePermission(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePermission without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeletePermissionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deletePermission = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePermission(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePermission with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeletePermissionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePermission = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePermission(request), expectedError);
            const actualRequest = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deletePermission as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deletePermission with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeletePermissionRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeletePermissionRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deletePermission(request), expectedError);
        });
    });

    describe('getRole', () => {
        it('invokes getRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.getRole = stubSimpleCall(expectedResponse);
            const [response] = await client.getRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.getRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRole(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRole with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.GetRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.GetRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getRole(request), expectedError);
        });
    });

    describe('createRole', () => {
        it('invokes createRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.createRole = stubSimpleCall(expectedResponse);
            const [response] = await client.createRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.createRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRole(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRole with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.CreateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.CreateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createRole(request), expectedError);
        });
    });

    describe('updateRole', () => {
        it('invokes updateRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.updateRole = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.Role()
            );
            client.innerApiCalls.updateRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRole(
                    request,
                    (err?: Error|null, result?: protos.animeshon.grbac.v1alpha1.IRole|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedHeaderRequestParams = `role.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRole(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRole with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.UpdateRoleRequest()
            );
            request.role ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.UpdateRoleRequest', ['role', 'name']);
            request.role.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateRole(request), expectedError);
        });
    });

    describe('deleteRole', () => {
        it('invokes deleteRole without error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRole = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRole(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRole without error using callback', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRole = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRole(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRole with error', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRole = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRole(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRole as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRole with closed client', async () => {
            const client = new accesscontrolModule.v1alpha1.AccessControlClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.animeshon.grbac.v1alpha1.DeleteRoleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.animeshon.grbac.v1alpha1.DeleteRoleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteRole(request), expectedError);
        });
    });
});
