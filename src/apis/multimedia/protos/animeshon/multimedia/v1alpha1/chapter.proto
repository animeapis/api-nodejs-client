syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/iam/v1/iam_policy.proto";
import "google/iam/v1/policy.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/type/date.proto";
import "google/type/localized_text.proto";

package animeshon.multimedia.v1alpha1;

option go_package = "github.com/animeapis/go-genproto/multimedia/v1alpha1;multimedia";
option java_package = "com.animeshon.multimedia.v1alpha1";
option java_multiple_files = true;
option ruby_package = "Animeshon::Multimedia::v1Alpha1";

service ChapterService {
  option (google.api.default_host) = "multimedia.animeapis.com";

  rpc GetChapter(GetChapterRequest) returns (Chapter) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=graphicNovels/*/chapters/*}"
    };
  }

  rpc ListChapters(ListChaptersRequest) returns (ListChaptersResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=graphicNovels/*}/chapters"
    };
  }

  rpc CreateChapter(CreateChapterRequest) returns (Chapter) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=graphicNovels/*}/chapters"
      body: "*"
    };
  }

  rpc UpdateChapter(UpdateChapterRequest) returns (Chapter) {
    option (google.api.http) = {
      patch: "/v1alpha1/{chapter.name=graphicNovels/*/chapters/*}"
      body: "*"
    };
  }

  rpc DeleteChapter(DeleteChapterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=graphicNovels/*/chapters/*}"
    };
  }

  // Reconcile chapters with the search and knowledge base.
  rpc ReconcileChapters(ReconcileChaptersRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=graphicNovels/*}/chapters:reconcile"
      body: "*"
    };
    option (google.longrunning.operation_info) = {
      response_type: "ReconcileChaptersResponse"
      metadata_type: "OperationMetadata"
    };
  }
}

message Chapter {
  enum Type {
    // The default value. This value is used if the state is omitted.
    TYPE_UNSPECIFIED = 0;

    // The chapter is a regular canonical chapter.
    REGULAR = 1;

    // The chapter is an extra chapter (e.g. specials, credits, etc.).
    EXTRA = 2;
  }

  // The id of the chapter.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  
  // The cover image of the chapter.
  string cover_image = 2;
  
  // The banner image of the chapter.
  string banner_image = 3;

  // The title of the chapter localized in multiple languages.
  repeated google.type.LocalizedText title = 4;

  // The synopsis of the chapter localized in multiple languages.
  repeated google.type.LocalizedText synopsis = 5;

  // The description of the chapter localized in multiple languages.
  repeated google.type.LocalizedText description = 6;

  // The type of chapter.
  Type type = 7;

  // The index of chapter.
  int32 index = 8;

  // The original release date of chapter.
  google.type.Date release_date = 9;

  // The original page count of the chapter.
  int32 page_count = 10;
}

message GetChapterRequest {
  // The name of the chapter to retrieve.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListChaptersRequest {
  // The parent this chapter belongs to.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // The value returned from the previous call.
  string page_token = 3;

  // A filter to be applied to results.
  string filter = 4;
}

message ListChaptersResponse {
  // The list of chapters.
  repeated Chapter chapters = 1;

  // A token to retrieve next page of results.
  string next_page_token = 2;
}

message CreateChapterRequest {
  // The parent this chapter belongs to.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The chapter to create.
  Chapter chapter = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateChapterRequest {
  // The chapter to update.
  Chapter chapter = 1 [(google.api.field_behavior) = REQUIRED];

  // The field mask to determine which fields are to be updated. If empty, the
  // server will assume all fields are to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteChapterRequest {
  // The name of the chapter to delete.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ReconcileChaptersRequest {
  string parent = 1 [(google.api.field_behavior) = REQUIRED];
}

message ReconcileChaptersResponse {}
